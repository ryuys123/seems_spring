plugins {
	id 'java'
	id 'war'
	id 'org.springframework.boot' version '3.4.5'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.test'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	querydslVersion = "5.0.0"
}

//스프링부트는 jsp 사용을 권장하지 않는다. (별도의 template 을 사용하도록 제공함)
//spring-boot-starter-tomcat 설정이 스프링부트에 내장된 톰켓을 의미함 (기본 포트는 8080)
//스프링부트에 내장된 톰켓은 jsp 엔진이 들어 있지 않음 (jsp 코드 해석 못 함, jsp 지원 안됨)
//그러므로 jsp 에 대한 별도의 의존성 추가가 필요함
dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-security'
	//스프링 부트 시큐리티 관련 기본 설정과 의존성 기능 제공
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	//데이터의 유효성 검사용 어노테이션 제공
	implementation 'org.springframework.boot:spring-boot-starter-web'
	//스프링 부트 웹 관련 기본 설정과 의존성 기능 제공, Restful 관련 어노테이션 제공

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	//스프링 부트와 연동되는 jpa 기술 관련 의존성 기능 제공
	//오라클 db 사용 라이브러리 의존성 추가 (21C xe)
	runtimeOnly 'com.oracle.database.jdbc:ojdbc11'

	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	// QueryDSL for JPA
	implementation "com.querydsl:querydsl-jpa:${querydslVersion}:jakarta"
	annotationProcessor "com.querydsl:querydsl-apt:${querydslVersion}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	//jwt (Json Web Token)
	implementation 'io.jsonwebtoken:jjwt-api:0.12.6'  // JWT 를 생성하고 검증하기 위한 라이브러리임
	implementation 'io.jsonwebtoken:jjwt-impl:0.12.6'  // JWT 구현체를 런타임시 의존성 추가하는 라이브러리임
	implementation 'io.jsonwebtoken:jjwt-jackson:0.12.6'
	// JSON 처리를 위한 Jackson과 연동되는 JJWT 의존성을 런타임시 추가함

	// 소셜로그인 (OAuth 2.0) 인증을 위한 라이브러리 의존성 추가
	implementation 'com.github.scribejava:scribejava-apis:8.3.3'
	implementation 'com.github.scribejava:scribejava-core:8.3.3'
	implementation 'org.apache.httpcomponents:httpclient:4.5.13'

	// jsp 사용을 위한 라이브러리 의존성 추가
	implementation 'org.apache.tomcat.embed:tomcat-embed-jasper'
	implementation 'jakarta.servlet:jakarta.servlet-api:6.0.0'
	implementation 'jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api:3.0.0'
	implementation 'org.glassfish.web:jakarta.servlet.jsp.jstl:3.0.1'

	//jsonObject 사용 라이브러리 의존성 추가
	implementation 'com.googlecode.json-simple:json-simple:1.1.1'

	//Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Devtools (개발시 유용한 도구를 제공하는 라이브러리임 (자동 스타터)
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	implementation 'org.springframework.boot:spring-boot-starter-tomcat'
	//스프링 부트에 내장된 톰켓 라이브러리, 웹 애플리케이션 구동을 위한 라이브러리임

	// Configuration processor
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	//스프링 부트 설정과 관련된 어노테이션과 기능을 제공하는 라이브러리

	// Test : 테스트를 위한 라이브러리임. 테스트 코드 작성시 이용됨, 테스트 코드는 서버 구동없이 실행함
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// sourceSets
//gradle build 시 QClass (Q엔티티클래스명) 소스도 함께 build 하기 위해서 sourceSets 에 저장할 위치를 추가 지정해 준다.
def querydslSrcDir = 'src/main/generated'
sourceSets {
	main {
		java {
			srcDirs += [ querydslSrcDir ]
		}
	}
}

//annotationProcessorGeneratedSourcesDirectory 를 사용할 수도 있는데,
//Gradle 공식 문서에 해당 기능은 deprecated 되었고, 추후 major 버전에서 삭제할 것이라고 소개되어 있음
// generatedSourceOutputDirectory 를 사용함
//generatedSourceOutputDirectory 는 annotation processors 에서 생성한 소스 파일을 저장할 디렉토리를 지정해 준다.
//위에서 선언한 src/main/generated 에 annotation processors 가 만든 Q클래스들을 저장하도록 설정함
tasks.withType(JavaCompile) {
	options.generatedSourceOutputDirectory = file(querydslSrcDir)
}

//build clean 시에 생성되었던 QClass 들도 모두 삭제하고자 한다면
//만들어진 Q엔티티클래스 삭제하기 : Gradle > build > clean
//Q엔티티클래스 만들기 : Gradle > build > compileJava
//src/main/generated 폴더 아래에 Q엔티티클래스 만들어졌으면 QueryDSL 설정이 정상적으로 작동된 것이다.
clean {
	delete file(querydslSrcDir)
}


tasks.named('test') {
	useJUnitPlatform()
}


