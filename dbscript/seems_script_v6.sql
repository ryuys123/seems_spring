-- 시퀀스 드롭

--DROP SEQUENCE SEQ_USERS_USER_ID;
DROP SEQUENCE SEQ_REFRESH_TOKENS_ID;
DROP SEQUENCE SEQ_USER_SOCIAL_LOGIN_SOCIAL_LOGIN_ID;
DROP SEQUENCE SEQ_USER_FACE_LOGIN_FACE_LOGIN_ID;
DROP SEQUENCE SEQ_LOGIN_HISTORY_LOGIN_HISTORY_ID;
DROP SEQUENCE SEQ_COUNSELING_SESSIONS_SESSION_ID;
DROP SEQUENCE SEQ_COUNSELING_MESSAGES_MESSAGE_ID;
DROP SEQUENCE SEQ_COUNSELING_ANALYSIS_SUMMARIES_SUMMARY_ID;
DROP SEQUENCE SEQ_GUIDANCE_TYPES_GUIDANCE_TYPE_ID;
DROP SEQUENCE SEQ_EMOTIONS_EMOTION_ID;
DROP SEQUENCE SEQ_EMOTION_LOGS_EMOTION_LOG_ID;
DROP SEQUENCE SEQ_TEST_QUESTIONS_QUESTION_ID;
DROP SEQUENCE SEQ_PERSONALITY_TEST_ANSWERS_ANSWER_ID;
DROP SEQUENCE SEQ_PERSONALITY_ANALYSIS_PERSONALITY_ID;
DROP SEQUENCE SEQ_PSYCHOLOGICAL_TEST_ANSWERS_ANSWER_ID;
DROP SEQUENCE SEQ_PSYCHOLOGICAL_ANALYSIS_PSYCHO_ID;
DROP SEQUENCE SEQ_USER_ANALYSIS_SUMMARY_USER_SUMMARY_ID;
DROP SEQUENCE SEQ_FEEDBACK_RECOMMENDATIONS_FEEDBACK_ID;
DROP SEQUENCE SEQ_QUEST_REWARDS_QUEST_ID;
DROP SEQUENCE SEQ_CONTENTS_CONTENT_ID;
DROP SEQUENCE SEQ_SIMULATION_SCENARIOS_SCENARIO_ID;
DROP SEQUENCE SEQ_SIMULATION_SETTINGS_SETTING_ID;
DROP SEQUENCE SEQ_SIMULATION_QUESTIONS_QUESTION_ID;
DROP SEQUENCE SEQ_SIMULATION_CHOICES_CHOICE_ID;
DROP SEQUENCE SEQ_SIMULATION_RESULTS_RESULT_ID;
DROP SEQUENCE SEQ_NOTICES_NOTICE_ID;
DROP SEQUENCE SEQ_INQUIRIES_INQUIRY_ID;
DROP SEQUENCE SEQ_COMMENTS_COMMENT_ID;
DROP SEQUENCE SEQ_SYSTEM_LOGS_LOG_ID;
DROP SEQUENCE SEQ_ANALYSIS_TYPES_ANALYSIS_TYPE_ID;
DROP SEQUENCE SEQ_PERSONALITY_TESTS_PERSONALITY_TEST_ID;
DROP SEQUENCE SEQ_PSYCHOLOGICAL_TESTS_PSYCHO_TEST_ID;
DROP SEQUENCE SEQ_CONTENT_RECOMMENDATIONS_RECOMMENDATION_ID;
DROP SEQUENCE SEQ_USER_REWARDS_USER_REWARD_ID;



-- 테이블 드롭

DROP TABLE TB_FEEDBACK_RECOMMENDATIONS CASCADE CONSTRAINTS;
DROP TABLE TB_PERSONALITY_TEST_ANSWERS CASCADE CONSTRAINTS;
DROP TABLE TB_PSYCHOLOGICAL_TEST_ANSWERS CASCADE CONSTRAINTS;
DROP TABLE TB_SIMULATION_CHOICES CASCADE CONSTRAINTS;
DROP TABLE TB_SIMULATION_RESULTS CASCADE CONSTRAINTS;
DROP TABLE TB_USER_ANALYSIS_SUMMARY CASCADE CONSTRAINTS;
DROP TABLE TB_PERSONALITY_ANALYSIS CASCADE CONSTRAINTS;
DROP TABLE TB_PSYCHOLOGICAL_ANALYSIS CASCADE CONSTRAINTS;
DROP TABLE TB_COUNSELING_MESSAGES CASCADE CONSTRAINTS;
DROP TABLE TB_COUNSELING_ANALYSIS_SUMMARIES CASCADE CONSTRAINTS;
DROP TABLE TB_SIMULATION_SETTINGS CASCADE CONSTRAINTS;
DROP TABLE TB_SIMULATION_QUESTIONS CASCADE CONSTRAINTS;
DROP TABLE TB_EMOTION_LOGS CASCADE CONSTRAINTS;
DROP TABLE TB_COUNSELING_SESSIONS CASCADE CONSTRAINTS;
DROP TABLE TB_LOGIN_HISTORY CASCADE CONSTRAINTS;
DROP TABLE TB_USER_SOCIAL_LOGIN CASCADE CONSTRAINTS;
DROP TABLE TB_USER_FACE_LOGIN CASCADE CONSTRAINTS;
DROP TABLE TB_CONTENTS CASCADE CONSTRAINTS;
DROP TABLE TB_INQUIRIES CASCADE CONSTRAINTS;
DROP TABLE TB_SYSTEM_LOGS CASCADE CONSTRAINTS;
DROP TABLE TB_TEST_QUESTIONS CASCADE CONSTRAINTS;
DROP TABLE TB_QUEST_REWARDS CASCADE CONSTRAINTS;
DROP TABLE TB_SIMULATION_SCENARIOS CASCADE CONSTRAINTS;
DROP TABLE TB_COMMENTS CASCADE CONSTRAINTS;
DROP TABLE TB_NOTICES CASCADE CONSTRAINTS;
DROP TABLE TB_EMOTIONS CASCADE CONSTRAINTS;
DROP TABLE TB_GUIDANCE_TYPES CASCADE CONSTRAINTS;
DROP TABLE TB_REFRESH_TOKENS CASCADE CONSTRAINTS;
DROP TABLE TB_USERS CASCADE CONSTRAINTS;
DROP TABLE TB_USER_POINTS CASCADE CONSTRAINTS;
DROP TABLE TB_USER_REWARDS CASCADE CONSTRAINTS;



-- 시퀀스 생성

--CREATE SEQUENCE SEQ_USERS_USER_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_REFRESH_TOKENS_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_USER_SOCIAL_LOGIN_SOCIAL_LOGIN_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_USER_FACE_LOGIN_FACE_LOGIN_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_LOGIN_HISTORY_LOGIN_HISTORY_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_COUNSELING_SESSIONS_SESSION_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_COUNSELING_MESSAGES_MESSAGE_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_COUNSELING_ANALYSIS_SUMMARIES_SUMMARY_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_GUIDANCE_TYPES_GUIDANCE_TYPE_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_EMOTIONS_EMOTION_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_EMOTION_LOGS_EMOTION_LOG_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_TEST_QUESTIONS_QUESTION_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_PERSONALITY_TEST_ANSWERS_ANSWER_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_PERSONALITY_ANALYSIS_PERSONALITY_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_PSYCHOLOGICAL_TEST_ANSWERS_ANSWER_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_PSYCHOLOGICAL_ANALYSIS_PSYCHO_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_USER_ANALYSIS_SUMMARY_USER_SUMMARY_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_FEEDBACK_RECOMMENDATIONS_FEEDBACK_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_QUEST_REWARDS_QUEST_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_CONTENTS_CONTENT_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_SIMULATION_SCENARIOS_SCENARIO_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_SIMULATION_SETTINGS_SETTING_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_SIMULATION_QUESTIONS_QUESTION_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_SIMULATION_CHOICES_CHOICE_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_SIMULATION_RESULTS_RESULT_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_NOTICES_NOTICE_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_INQUIRIES_INQUIRY_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_COMMENTS_COMMENT_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_SYSTEM_LOGS_LOG_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_ANALYSIS_TYPES_ANALYSIS_TYPE_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_PERSONALITY_TESTS_PERSONALITY_TEST_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_PSYCHOLOGICAL_TESTS_PSYCHO_TEST_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_CONTENT_RECOMMENDATIONS_RECOMMENDATION_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_USER_REWARDS_USER_REWARD_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;


-- 테이블 생성

-- 1. TB_USERS
CREATE TABLE TB_USERS (
                          USER_ID VARCHAR2(255) PRIMARY KEY,
                          PHONE VARCHAR2(100) NOT NULL,
--    EMAIL VARCHAR2(100) NOT NULL,
                          PASSWORD_HASH VARCHAR2(255),
                          USERNAME VARCHAR2(50) NOT NULL,
                          PROFILE_IMAGE BLOB,
                          CREATED_AT DATE DEFAULT SYSDATE NOT NULL,
                          UPDATED_AT DATE,
                          STATUS NUMBER(1) DEFAULT 1 NOT NULL,
                          ADMIN_YN VARCHAR2(1) DEFAULT 'N',

--    CONSTRAINT UK_TB_USERS_EMAIL UNIQUE (EMAIL),
                          CONSTRAINT CHK_TB_USERS_STATUS CHECK (STATUS IN (1, -1)),
                          CONSTRAINT CHK_ADMIN_YN CHECK (ADMIN_YN IN ('Y', 'N'))
);

COMMENT ON TABLE TB_USERS IS '사용자 계정 정보';
COMMENT ON COLUMN TB_USERS.USER_ID IS '사용자 고유 식별자';
COMMENT ON COLUMN TB_USERS.PHONE IS '전화번호';
--COMMENT ON COLUMN TB_USERS.EMAIL IS '사용자 이메일 주소';
COMMENT ON COLUMN TB_USERS.PASSWORD_HASH IS '해시된 비밀번호 (자체 로그인)';
COMMENT ON COLUMN TB_USERS.USERNAME IS '사용자 이름';
COMMENT ON COLUMN TB_USERS.PROFILE_IMAGE IS '프로필 사진 이미지';
COMMENT ON COLUMN TB_USERS.CREATED_AT IS '계정 생성 시간';
COMMENT ON COLUMN TB_USERS.UPDATED_AT IS '계정 정보 수정 시간';
COMMENT ON COLUMN TB_USERS.STATUS IS '계정 상태 (1: 활성, -1: 탈퇴)';
COMMENT ON COLUMN TB_USERS.ADMIN_YN IS '관리자 권한 여부';

-- 2. TB_REFRESH_TOKENS
CREATE TABLE TB_REFRESH_TOKENS (
                                   ID VARCHAR2(36) PRIMARY KEY,
                                   USER_ID VARCHAR2(255) NOT NULL,
                                   TOKEN_VALUE VARCHAR2(255) NOT NULL UNIQUE,
                                   CONSTRAINT FK_RT_USER_ID FOREIGN KEY (USER_ID) REFERENCES TB_USERS(USER_ID) ON DELETE CASCADE
);

COMMENT ON COLUMN TB_REFRESH_TOKENS.ID IS '등록용 ID';
COMMENT ON COLUMN TB_REFRESH_TOKENS.USER_ID IS '사용자 고유 ID (외래키)';
COMMENT ON COLUMN TB_REFRESH_TOKENS.TOKEN_VALUE IS '리프레시 토큰 값';

-- 3. TB_USER_SOCIAL_LOGIN
CREATE TABLE TB_USER_SOCIAL_LOGIN (
                                      SOCIAL_LOGIN_ID NUMBER(19) PRIMARY KEY,
                                      USER_ID VARCHAR2(255) NOT NULL,
                                      PROVIDER VARCHAR2(50) NOT NULL,
                                      SOCIAL_ID VARCHAR2(100) NOT NULL,
                                      LINKED_AT DATE DEFAULT SYSDATE NOT NULL,

                                      CONSTRAINT FK_SOCIAL_USER FOREIGN KEY (USER_ID) REFERENCES TB_USERS(USER_ID),
                                      CONSTRAINT UK_SOCIAL_PROVIDER_ID UNIQUE (PROVIDER, SOCIAL_ID)
);

COMMENT ON TABLE TB_USER_SOCIAL_LOGIN IS '소셜 로그인 연동 정보';
COMMENT ON COLUMN TB_USER_SOCIAL_LOGIN.SOCIAL_LOGIN_ID IS '소셜 로그인 고유 식별자';
COMMENT ON COLUMN TB_USER_SOCIAL_LOGIN.USER_ID IS 'TB_USERS 테이블의 사용자 ID (FK)';
COMMENT ON COLUMN TB_USER_SOCIAL_LOGIN.PROVIDER IS '소셜 로그인 제공자 (예: GOOGLE, KAKAO)';
COMMENT ON COLUMN TB_USER_SOCIAL_LOGIN.SOCIAL_ID IS '소셜 로그인 플랫폼에서의 고유 ID';
COMMENT ON COLUMN TB_USER_SOCIAL_LOGIN.LINKED_AT IS '소셜 로그인 계정이 연동된 시간';


-- 4. TB_USER_FACE_LOGIN
CREATE TABLE TB_USER_FACE_LOGIN (
                                    FACE_LOGIN_ID NUMBER(19) PRIMARY KEY,
                                    USER_ID VARCHAR2(255) NOT NULL,
                                    FACE_ID_HASH VARCHAR2(255) NOT NULL,
                                    REGISTERED_AT DATE DEFAULT SYSDATE NOT NULL,
                                    LAST_USED_AT DATE,
                                    IS_ACTIVE NUMBER(1) DEFAULT 1 NOT NULL,

                                    CONSTRAINT FK_FACE_USER FOREIGN KEY (USER_ID) REFERENCES TB_USERS(USER_ID),
                                    CONSTRAINT UK_FACE_USER UNIQUE (USER_ID),
                                    CONSTRAINT CHK_FACE_ACTIVE CHECK (IS_ACTIVE IN (1, 0))
);

COMMENT ON TABLE TB_USER_FACE_LOGIN IS '사용자의 얼굴 인식 로그인 정보';
COMMENT ON COLUMN TB_USER_FACE_LOGIN.FACE_LOGIN_ID IS '얼굴 로그인 고유 식별자';
COMMENT ON COLUMN TB_USER_FACE_LOGIN.USER_ID IS 'TB_USERS 테이블의 사용자 ID (FK)';
COMMENT ON COLUMN TB_USER_FACE_LOGIN.FACE_ID_HASH IS '얼굴 특징값 해시 (민감정보 보호)';
COMMENT ON COLUMN TB_USER_FACE_LOGIN.REGISTERED_AT IS '얼굴 로그인 등록 시간';
COMMENT ON COLUMN TB_USER_FACE_LOGIN.LAST_USED_AT IS '최근 얼굴 로그인 시도 시간';
COMMENT ON COLUMN TB_USER_FACE_LOGIN.IS_ACTIVE IS '얼굴 로그인 사용 상태 (1: 활성, 0: 비활성)';


-- 5. TB_LOGIN_HISTORY
CREATE TABLE TB_LOGIN_HISTORY (
                                  LOGIN_HISTORY_ID NUMBER(19) PRIMARY KEY,
                                  USER_ID VARCHAR2(255) NOT NULL,
                                  LOGIN_TIME TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
                                  LOGOUT_TIME TIMESTAMP NULL,
                                  IP_ADDRESS VARCHAR2(45),
                                  USER_AGENT VARCHAR2(255),
                                  LOGIN_RESULT VARCHAR2(20) NOT NULL,
                                  CREATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,

                                  CONSTRAINT FK_LOGIN_USER FOREIGN KEY (USER_ID) REFERENCES TB_USERS(USER_ID) ON DELETE CASCADE
);

COMMENT ON TABLE TB_LOGIN_HISTORY IS '사용자 로그인 이력 기록';
COMMENT ON COLUMN TB_LOGIN_HISTORY.LOGIN_HISTORY_ID IS '로그인 이력 고유 식별자';
COMMENT ON COLUMN TB_LOGIN_HISTORY.USER_ID IS 'TB_USERS 테이블의 사용자 ID 참조';
COMMENT ON COLUMN TB_LOGIN_HISTORY.LOGIN_TIME IS '로그인 시각';
COMMENT ON COLUMN TB_LOGIN_HISTORY.LOGOUT_TIME IS '로그아웃 시각';
COMMENT ON COLUMN TB_LOGIN_HISTORY.IP_ADDRESS IS '사용자 접속 IP 주소';
COMMENT ON COLUMN TB_LOGIN_HISTORY.USER_AGENT IS '사용자 브라우저 및 디바이스 정보';
COMMENT ON COLUMN TB_LOGIN_HISTORY.LOGIN_RESULT IS '로그인 결과 (예: SUCCESS, FAIL)';
COMMENT ON COLUMN TB_LOGIN_HISTORY.CREATED_AT IS '로그 생성 시각';



-- 6. TB_COUNSELING_SESSIONS
CREATE TABLE TB_COUNSELING_SESSIONS (
                                        SESSION_ID NUMBER(19) PRIMARY KEY,
                                        USER_ID VARCHAR2(255) NOT NULL,
                                        TOPIC VARCHAR2(100) NOT NULL,
                                        METHOD VARCHAR2(10) NOT NULL,
                                        START_TIME DATE NOT NULL,
                                        END_TIME DATE,
                                        CREATED_AT DATE DEFAULT SYSDATE NOT NULL,

                                        CONSTRAINT FK_COUNSELING_USER FOREIGN KEY (USER_ID) REFERENCES TB_USERS(USER_ID) ON DELETE CASCADE,
                                        CONSTRAINT CHK_COUNSELING_METHOD CHECK (METHOD IN ('TEXT', 'VOICE'))
);

COMMENT ON TABLE TB_COUNSELING_SESSIONS IS '상담 챗봇 세션 기록';
COMMENT ON COLUMN TB_COUNSELING_SESSIONS.SESSION_ID IS '상담 세션 고유 식별자';
COMMENT ON COLUMN TB_COUNSELING_SESSIONS.USER_ID IS 'TB_USERS 테이블의 사용자 ID 참조';
COMMENT ON COLUMN TB_COUNSELING_SESSIONS.TOPIC IS '상담 주제 (예: 연애, 자아성찰)';
COMMENT ON COLUMN TB_COUNSELING_SESSIONS.METHOD IS '상담 방식 (TEXT, VOICE)';
COMMENT ON COLUMN TB_COUNSELING_SESSIONS.START_TIME IS '세션 시작 시간';
COMMENT ON COLUMN TB_COUNSELING_SESSIONS.END_TIME IS '세션 종료 시간';
COMMENT ON COLUMN TB_COUNSELING_SESSIONS.CREATED_AT IS '세션 생성 시간';


-- 7. TB_COUNSELING_MESSAGES
CREATE TABLE TB_COUNSELING_MESSAGES (
                                        MESSAGE_ID NUMBER(19) PRIMARY KEY,
                                        SESSION_ID NUMBER(19) NOT NULL,
                                        SENDER VARCHAR2(50) NOT NULL,
                                        MESSAGE_TYPE VARCHAR2(10) DEFAULT 'TEXT' CHECK (MESSAGE_TYPE IN ('TEXT', 'VOICE', 'IMAGE')),
                                        MESSAGE_CONTENT CLOB,
                                        IMAGE_FILE_PATH VARCHAR2(255),
                                        MESSAGE_TIME DATE NOT NULL,
                                        CREATED_AT DATE DEFAULT SYSDATE NOT NULL,

                                        CONSTRAINT FK_MESSAGE_SESSION FOREIGN KEY (SESSION_ID) REFERENCES TB_COUNSELING_SESSIONS(SESSION_ID) ON DELETE CASCADE
);

COMMENT ON TABLE TB_COUNSELING_MESSAGES IS '상담 세션의 개별 메시지 기록';
COMMENT ON COLUMN TB_COUNSELING_MESSAGES.MESSAGE_ID IS '메시지 고유 식별자';
COMMENT ON COLUMN TB_COUNSELING_MESSAGES.SESSION_ID IS 'TB_COUNSELING_SESSIONS 테이블의 세션 ID 참조';
COMMENT ON COLUMN TB_COUNSELING_MESSAGES.SENDER IS '메시지 발신자 (예: USER, BOT)';
COMMENT ON COLUMN TB_COUNSELING_MESSAGES.MESSAGE_TYPE IS '메시지 유형 (TEXT, VOICE, IMAGE)';
COMMENT ON COLUMN TB_COUNSELING_MESSAGES.MESSAGE_CONTENT IS '메시지 텍스트 내용';
COMMENT ON COLUMN TB_COUNSELING_MESSAGES.IMAGE_FILE_PATH IS '이미지 파일 경로 (예: 표정 캡처)';
COMMENT ON COLUMN TB_COUNSELING_MESSAGES.MESSAGE_TIME IS '메시지 전송 시간';
COMMENT ON COLUMN TB_COUNSELING_MESSAGES.CREATED_AT IS '메시지 생성 시간';


-- 8. TB_GUIDANCE_TYPES
CREATE TABLE TB_GUIDANCE_TYPES (
                                   GUIDANCE_TYPE_ID NUMBER(19) PRIMARY KEY,
                                   GUIDANCE_TYPE_NAME VARCHAR2(100) NOT NULL,
                                   DESCRIPTION VARCHAR2(255),

                                   CONSTRAINT UK_GUIDANCE_TYPE_NAME UNIQUE (GUIDANCE_TYPE_NAME)
);

COMMENT ON TABLE TB_GUIDANCE_TYPES IS '상담 가이드 유형';
COMMENT ON COLUMN TB_GUIDANCE_TYPES.GUIDANCE_TYPE_ID IS '가이드 유형의 고유 식별자';
COMMENT ON COLUMN TB_GUIDANCE_TYPES.GUIDANCE_TYPE_NAME IS '가이드 유형 이름 (예: 자기성찰, 관계 개선)';
COMMENT ON COLUMN TB_GUIDANCE_TYPES.DESCRIPTION IS '가이드 유형에 대한 설명 (예: 유형의 목적 및 특징)';


-- 9. TB_COUNSELING_ANALYSIS_SUMMARIES
CREATE TABLE TB_COUNSELING_ANALYSIS_SUMMARIES (
                                                  SUMMARY_ID NUMBER(19) PRIMARY KEY,
                                                  SESSION_ID NUMBER(19) NOT NULL,
                                                  SUMMARY_TYPE VARCHAR2(20) NOT NULL CHECK (SUMMARY_TYPE IN ('TEXT', 'VOICE')),
                                                  GUIDANCE_TYPE_ID NUMBER(19) NOT NULL,
                                                  SUMMARY_CONTENT CLOB NOT NULL,
                                                  CREATED_AT DATE DEFAULT SYSDATE NOT NULL,

                                                  CONSTRAINT FK_SUMMARY_SESSION FOREIGN KEY (SESSION_ID) REFERENCES TB_COUNSELING_SESSIONS(SESSION_ID) ON DELETE CASCADE,
                                                  CONSTRAINT FK_SUMMARY_GUIDANCE_TYPE FOREIGN KEY (GUIDANCE_TYPE_ID) REFERENCES TB_GUIDANCE_TYPES(GUIDANCE_TYPE_ID) ON DELETE CASCADE
);

COMMENT ON TABLE TB_COUNSELING_ANALYSIS_SUMMARIES IS '상담 분석 요약';
COMMENT ON COLUMN TB_COUNSELING_ANALYSIS_SUMMARIES.SUMMARY_ID IS '상담 요약의 고유 식별자';
COMMENT ON COLUMN TB_COUNSELING_ANALYSIS_SUMMARIES.SESSION_ID IS 'TB_COUNSELING_SESSIONS 테이블의 세션 ID 참조, 요약 대상 상담 세션';
COMMENT ON COLUMN TB_COUNSELING_ANALYSIS_SUMMARIES.SUMMARY_TYPE IS '상담 분석 타입 (TEXT: 텍스트 기반, VOICE: 음성 기반)';
COMMENT ON COLUMN TB_COUNSELING_ANALYSIS_SUMMARIES.GUIDANCE_TYPE_ID IS 'TB_GUIDANCE_TYPES 테이블의 가이드 유형 ID 참조, 상담 유형(예: 자기성찰, 관계 개선)';
COMMENT ON COLUMN TB_COUNSELING_ANALYSIS_SUMMARIES.SUMMARY_CONTENT IS 'AI가 생성한 요약된 상담 내용 (예: 대화 주제, 감정 분석)';
COMMENT ON COLUMN TB_COUNSELING_ANALYSIS_SUMMARIES.CREATED_AT IS '요약 생성 시간, 기본값 SYSDATE';


-- 10. TB_EMOTIONS
CREATE TABLE TB_EMOTIONS (
                             EMOTION_ID NUMBER(19) PRIMARY KEY,
                             EMOTION_NAME VARCHAR2(50) NOT NULL,
                             DESCRIPTION VARCHAR2(255),
                             CONSTRAINT UK_EMOTION_NAME UNIQUE (EMOTION_NAME)
);

COMMENT ON TABLE TB_EMOTIONS IS '감정 유형 관리';
COMMENT ON COLUMN TB_EMOTIONS.EMOTION_ID IS '감정 고유 식별자';
COMMENT ON COLUMN TB_EMOTIONS.EMOTION_NAME IS '감정 이름 (예: 기쁨, 슬픔, 분노)';
COMMENT ON COLUMN TB_EMOTIONS.DESCRIPTION IS '감정 설명';


-- 11. TB_EMOTION_LOGS
CREATE TABLE TB_EMOTION_LOGS (
                                 EMOTION_LOG_ID NUMBER(19) PRIMARY KEY,
                                 USER_ID VARCHAR2(255) NOT NULL,
                                 EMOTION_ID NUMBER(19) NOT NULL,
                                 TEXT_CONTENT CLOB,
                                 CREATED_AT DATE DEFAULT SYSDATE NOT NULL,
                                 UPDATED_AT DATE,
                                 CONSTRAINT FK_EMOTION_USER FOREIGN KEY (USER_ID) REFERENCES TB_USERS(USER_ID) ON DELETE CASCADE,
                                 CONSTRAINT FK_EMOTION_EMOTION FOREIGN KEY (EMOTION_ID) REFERENCES TB_EMOTIONS(EMOTION_ID) ON DELETE CASCADE
);

COMMENT ON TABLE TB_EMOTION_LOGS IS '감정 기록';
COMMENT ON COLUMN TB_EMOTION_LOGS.EMOTION_LOG_ID IS '감정 로그 고유 식별자';
COMMENT ON COLUMN TB_EMOTION_LOGS.USER_ID IS 'TB_USERS 테이블의 사용자 ID 참조';
COMMENT ON COLUMN TB_EMOTION_LOGS.EMOTION_ID IS 'TB_EMOTIONS 테이블의 감정 ID 참조';
COMMENT ON COLUMN TB_EMOTION_LOGS.TEXT_CONTENT IS '텍스트로 기록한 감정 내용 (최대 4000자)';
COMMENT ON COLUMN TB_EMOTION_LOGS.CREATED_AT IS '기록 생성 시간';
COMMENT ON COLUMN TB_EMOTION_LOGS.UPDATED_AT IS '기록 수정 시간';



-- 12. TB_TEST_QUESTIONS
CREATE TABLE TB_TEST_QUESTIONS (
                                   QUESTION_ID NUMBER(19) PRIMARY KEY,
                                   TEST_TYPE VARCHAR2(50) NOT NULL,
                                   QUESTION_TEXT VARCHAR2(255) NOT NULL,
                                   WEIGHT NUMBER(5,2) DEFAULT 1.0,
                                   CATEGORY VARCHAR2(50),
                                   CONSTRAINT CHK_TEST_TYPE CHECK (TEST_TYPE IN ('PSYCHOLOGICAL', 'PERSONALITY'))
);

COMMENT ON TABLE TB_TEST_QUESTIONS IS '검사 문항';
COMMENT ON COLUMN TB_TEST_QUESTIONS.QUESTION_ID IS '문항 고유 식별자';
COMMENT ON COLUMN TB_TEST_QUESTIONS.TEST_TYPE IS '검사 유형 (PSYCHOLOGICAL: 심리검사, PERSONALITY: 성격검사)';
COMMENT ON COLUMN TB_TEST_QUESTIONS.QUESTION_TEXT IS '문항 내용';
COMMENT ON COLUMN TB_TEST_QUESTIONS.WEIGHT IS '분석 가중치 (기본값 1.0)';
COMMENT ON COLUMN TB_TEST_QUESTIONS.CATEGORY IS '문항 카테고리 (예: STRESS, DEPRESSION, E_I, N_S)';


-- 13. TB_PERSONALITY_TEST_ANSWERS
CREATE TABLE TB_PERSONALITY_TEST_ANSWERS (
                                             ANSWER_ID NUMBER(19) PRIMARY KEY,
                                             USER_ID VARCHAR2(255) NOT NULL,
                                             QUESTION_ID NUMBER(19) NOT NULL,
                                             ANSWER_VALUE VARCHAR2(50) NOT NULL,
                                             CONSTRAINT FK_PERSONALITY_USER_ID FOREIGN KEY (USER_ID) REFERENCES TB_USERS(USER_ID) ON DELETE CASCADE,
                                             CONSTRAINT FK_PERSONALITY_ANSWER_QUESTION FOREIGN KEY (QUESTION_ID) REFERENCES TB_TEST_QUESTIONS(QUESTION_ID) ON DELETE CASCADE
);

COMMENT ON TABLE TB_PERSONALITY_TEST_ANSWERS IS '성격검사 문항별 답변';
COMMENT ON COLUMN TB_PERSONALITY_TEST_ANSWERS.ANSWER_ID IS '답변 고유 식별자';
COMMENT ON COLUMN TB_PERSONALITY_TEST_ANSWERS.USER_ID IS '사용자 ID';
COMMENT ON COLUMN TB_PERSONALITY_TEST_ANSWERS.QUESTION_ID IS 'TB_TEST_QUESTIONS 테이블의 문항 ID 참조';
COMMENT ON COLUMN TB_PERSONALITY_TEST_ANSWERS.ANSWER_VALUE IS '문항 답변 값 (예: 1~5, YES/NO)';


-- 14. TB_PERSONALITY_ANALYSIS
CREATE TABLE TB_PERSONALITY_ANALYSIS (
                                         PERSONALITY_ID NUMBER(19) PRIMARY KEY,
                                         PERSONALITY_TEST_ID NUMBER(19) NOT NULL,
                                         USER_ID VARCHAR2(255) NOT NULL,
                                         ANALYSIS_TYPE_ID NUMBER(19) NOT NULL,
                                         QUEST_TYPE_ID NUMBER(19),
                                         RESULT VARCHAR2(50) NOT NULL,
                                         DESCRIPTION CLOB,
                                         RECOMMENDED_CHAT_STYLE VARCHAR2(50),
                                         CREATED_AT DATE DEFAULT SYSDATE NOT NULL,
                                         CONSTRAINT FK_PERSONALITY_ANALYSIS_USER FOREIGN KEY (USER_ID) REFERENCES TB_USERS(USER_ID) ON DELETE CASCADE
);

COMMENT ON TABLE TB_PERSONALITY_ANALYSIS IS '성격 분석 결과';
COMMENT ON COLUMN TB_PERSONALITY_ANALYSIS.PERSONALITY_ID IS '성격 분석 고유 식별자';
COMMENT ON COLUMN TB_PERSONALITY_ANALYSIS.USER_ID IS 'TB_USERS 테이블의 사용자 ID 참조';
COMMENT ON COLUMN TB_PERSONALITY_ANALYSIS.RESULT IS '분석 결과 (예: INFP, OCEAN 점수)';
COMMENT ON COLUMN TB_PERSONALITY_ANALYSIS.DESCRIPTION IS '결과에 대한 설명';
COMMENT ON COLUMN TB_PERSONALITY_ANALYSIS.RECOMMENDED_CHAT_STYLE IS '추천 챗봇 스타일 (예: 감성형, 이성형)';
COMMENT ON COLUMN TB_PERSONALITY_ANALYSIS.CREATED_AT IS '분석 생성 시간';


-- 15. TB_PSYCHOLOGICAL_TEST_ANSWERS
CREATE TABLE TB_PSYCHOLOGICAL_TEST_ANSWERS (
                                               ANSWER_ID NUMBER(19) PRIMARY KEY,
                                               USER_ID VARCHAR2(255) NOT NULL,
                                               QUESTION_ID NUMBER(19) NOT NULL,
                                               ANSWER_VALUE VARCHAR2(50) NOT NULL,
                                               CONSTRAINT FK_PSYCHO_ANSWER_USER_ID FOREIGN KEY (USER_ID) REFERENCES TB_USERS(USER_ID) ON DELETE CASCADE,
                                               CONSTRAINT FK_PSYCHO_ANSWER_QUESTION FOREIGN KEY (QUESTION_ID) REFERENCES TB_TEST_QUESTIONS(QUESTION_ID) ON DELETE CASCADE
);

COMMENT ON TABLE TB_PSYCHOLOGICAL_TEST_ANSWERS IS '심리검사 문항별 답변';
COMMENT ON COLUMN TB_PSYCHOLOGICAL_TEST_ANSWERS.ANSWER_ID IS '답변 고유 식별자';
COMMENT ON COLUMN TB_PSYCHOLOGICAL_TEST_ANSWERS.USER_ID IS '사용자 ID';
COMMENT ON COLUMN TB_PSYCHOLOGICAL_TEST_ANSWERS.QUESTION_ID IS 'TB_TEST_QUESTIONS 테이블의 문항 ID 참조';
COMMENT ON COLUMN TB_PSYCHOLOGICAL_TEST_ANSWERS.ANSWER_VALUE IS '문항 답변 값 (예: 1~5, YES/NO)';


-- 16. TB_PSYCHOLOGICAL_ANALYSIS
CREATE TABLE TB_PSYCHOLOGICAL_ANALYSIS (
                                           PSYCHO_ID NUMBER(19) PRIMARY KEY,
                                           PSYCHO_TEST_ID NUMBER(19) NOT NULL,
                                           USER_ID VARCHAR2(255) NOT NULL,
                                           SESSION_ID NUMBER(19),
                                           STRESS_LEVEL NUMBER(5,2),
                                           DEPRESSION_LEVEL NUMBER(5,2),
                                           SUGGESTIONS CLOB,
                                           CREATED_AT DATE DEFAULT SYSDATE NOT NULL,
                                           CONSTRAINT FK_PSYCHO_ANALYSIS_USER FOREIGN KEY (USER_ID) REFERENCES TB_USERS(USER_ID) ON DELETE CASCADE,
                                           CONSTRAINT FK_PSYCHO_ANALYSIS_SESSION FOREIGN KEY (SESSION_ID) REFERENCES TB_COUNSELING_SESSIONS(SESSION_ID) ON DELETE CASCADE,
                                           CONSTRAINT CHK_STRESS_LEVEL CHECK (STRESS_LEVEL >= 0 AND STRESS_LEVEL <= 100),
                                           CONSTRAINT CHK_DEPRESSION_LEVEL CHECK (DEPRESSION_LEVEL >= 0 AND DEPRESSION_LEVEL <= 100)
);

COMMENT ON TABLE TB_PSYCHOLOGICAL_ANALYSIS IS '심리 분석 결과';
COMMENT ON COLUMN TB_PSYCHOLOGICAL_ANALYSIS.PSYCHO_ID IS '심리 분석 고유 식별자';
COMMENT ON COLUMN TB_PSYCHOLOGICAL_ANALYSIS.PSYCHO_TEST_ID IS 'PSYCHOLOGICAL_TESTS 테이블의 심리검사 ID 참조';
COMMENT ON COLUMN TB_PSYCHOLOGICAL_ANALYSIS.USER_ID IS 'TB_USERS 테이블의 사용자 ID 참조';
COMMENT ON COLUMN TB_PSYCHOLOGICAL_ANALYSIS.SESSION_ID IS 'TB_COUNSELING_SESSIONS 테이블의 세션 ID 참조';
COMMENT ON COLUMN TB_PSYCHOLOGICAL_ANALYSIS.STRESS_LEVEL IS '스트레스 지표 (0~100)';
COMMENT ON COLUMN TB_PSYCHOLOGICAL_ANALYSIS.DEPRESSION_LEVEL IS '우울 지표 (0~100)';
COMMENT ON COLUMN TB_PSYCHOLOGICAL_ANALYSIS.SUGGESTIONS IS '개선 제안';
COMMENT ON COLUMN TB_PSYCHOLOGICAL_ANALYSIS.CREATED_AT IS '분석 생성 시간';


-- 17.TB_SIMULATION_SCENARIOS
CREATE TABLE TB_SIMULATION_SCENARIOS (
                                         SCENARIO_ID NUMBER(19) PRIMARY KEY,
                                         SCENARIO_NAME VARCHAR2(100) NOT NULL,
                                         DESCRIPTION CLOB,
                                         IS_ACTIVE NUMBER(1) DEFAULT 1 NOT NULL CHECK (IS_ACTIVE IN (0, 1)),
                                         CREATED_AT DATE DEFAULT SYSDATE NOT NULL,
                                         CONSTRAINT UK_SCENARIO_NAME UNIQUE (SCENARIO_NAME)
);

COMMENT ON TABLE TB_SIMULATION_SCENARIOS IS '시뮬레이션 시나리오';
COMMENT ON COLUMN TB_SIMULATION_SCENARIOS.SCENARIO_ID IS '시나리오의 고유 식별자';
COMMENT ON COLUMN TB_SIMULATION_SCENARIOS.SCENARIO_NAME IS '시나리오 이름 (예: 이직 고민, 대인 관계 갈등)';
COMMENT ON COLUMN TB_SIMULATION_SCENARIOS.DESCRIPTION IS '시나리오에 대한 상세 설명 (예: 시나리오의 목적, 예상 선택지)';
COMMENT ON COLUMN TB_SIMULATION_SCENARIOS.IS_ACTIVE IS '시나리오의 활성화 여부 (0: 비활성, 1: 활성)';
COMMENT ON COLUMN TB_SIMULATION_SCENARIOS.CREATED_AT IS '시나리오 생성 시간, 기본값 SYSDATE';


-- 18. TB_SIMULATION_SETTINGS
CREATE TABLE TB_SIMULATION_SETTINGS (
                                        SETTING_ID NUMBER(19) PRIMARY KEY,
                                        USER_ID VARCHAR2(255) NOT NULL,
                                        SCENARIO_ID NUMBER(19) NOT NULL,
                                        SESSION_ID NUMBER(19),
                                        STATUS VARCHAR2(20) DEFAULT 'IN_PROGRESS' NOT NULL CHECK (STATUS IN ('IN_PROGRESS', 'COMPLETED', 'CANCELLED')),
                                        CREATED_AT DATE DEFAULT SYSDATE NOT NULL,
                                        CONSTRAINT FK_SIMULATION_USER FOREIGN KEY (USER_ID) REFERENCES TB_USERS(USER_ID) ON DELETE CASCADE,
                                        CONSTRAINT FK_SIMULATION_SCENARIO FOREIGN KEY (SCENARIO_ID) REFERENCES TB_SIMULATION_SCENARIOS(SCENARIO_ID) ON DELETE CASCADE,
                                        CONSTRAINT FK_SIMULATION_SESSION FOREIGN KEY (SESSION_ID) REFERENCES TB_COUNSELING_SESSIONS(SESSION_ID) ON DELETE SET NULL
);

COMMENT ON TABLE TB_SIMULATION_SETTINGS IS '시뮬레이션 환경';
COMMENT ON COLUMN TB_SIMULATION_SETTINGS.SETTING_ID IS '시뮬레이션 설정의 고유 식별자';
COMMENT ON COLUMN TB_SIMULATION_SETTINGS.USER_ID IS 'TB_USERS 테이블의 사용자 ID 참조, 시뮬레이션 수행 사용자';
COMMENT ON COLUMN TB_SIMULATION_SETTINGS.SCENARIO_ID IS 'TB_SIMULATION_SCENARIOS 테이블의 시나리오 ID 참조';
COMMENT ON COLUMN TB_SIMULATION_SETTINGS.SESSION_ID IS 'TB_COUNSELING_SESSIONS 테이블의 세션 ID 참조';
COMMENT ON COLUMN TB_SIMULATION_SETTINGS.STATUS IS '시뮬레이션 진행 상태 (IN_PROGRESS, COMPLETED, CANCELLED)';
COMMENT ON COLUMN TB_SIMULATION_SETTINGS.CREATED_AT IS '설정 생성 시간';


-- 19. TB_SIMULATION_QUESTIONS
CREATE TABLE TB_SIMULATION_QUESTIONS (
                                         QUESTION_ID NUMBER(19) PRIMARY KEY,
                                         SCENARIO_ID NUMBER(19) NOT NULL,
                                         QUESTION_NUMBER NUMBER(5) NOT NULL,
                                         QUESTION_TEXT CLOB NOT NULL,
                                         CHOICE_OPTIONS CLOB NOT NULL,
                                         CONSTRAINT FK_QUESTION_SCENARIO FOREIGN KEY (SCENARIO_ID) REFERENCES TB_SIMULATION_SCENARIOS(SCENARIO_ID) ON DELETE CASCADE,
                                         CONSTRAINT UK_QUESTION_SCENARIO_NUMBER UNIQUE (SCENARIO_ID, QUESTION_NUMBER)
);

COMMENT ON TABLE TB_SIMULATION_QUESTIONS IS '시뮬레이션 질문';
COMMENT ON COLUMN TB_SIMULATION_QUESTIONS.QUESTION_ID IS '질문의 고유 식별자';
COMMENT ON COLUMN TB_SIMULATION_QUESTIONS.SCENARIO_ID IS 'TB_SIMULATION_SCENARIOS 테이블의 시나리오 ID 참조';
COMMENT ON COLUMN TB_SIMULATION_QUESTIONS.QUESTION_NUMBER IS '시나리오 내 질문 번호';
COMMENT ON COLUMN TB_SIMULATION_QUESTIONS.QUESTION_TEXT IS '질문 내용';
COMMENT ON COLUMN TB_SIMULATION_QUESTIONS.CHOICE_OPTIONS IS '선택지 옵션 (JSON 형식 또는 텍스트)';


-- 20. TB_SIMULATION_CHOICES
CREATE TABLE TB_SIMULATION_CHOICES (
                                       CHOICE_ID NUMBER(19) PRIMARY KEY,
                                       SETTING_ID NUMBER(19) NOT NULL,
                                       QUESTION_NUMBER NUMBER(5) NOT NULL,
                                       CHOICE_TEXT VARCHAR2(255) NOT NULL,
                                       CONSTRAINT FK_CHOICE_SETTING FOREIGN KEY (SETTING_ID) REFERENCES TB_SIMULATION_SETTINGS(SETTING_ID) ON DELETE CASCADE,
                                       CONSTRAINT UK_CHOICE_SETTING_QUESTION UNIQUE (SETTING_ID, QUESTION_NUMBER)
);

COMMENT ON TABLE TB_SIMULATION_CHOICES IS '시뮬레이션 선택지';
COMMENT ON COLUMN TB_SIMULATION_CHOICES.CHOICE_ID IS '선택지의 고유 식별자';
COMMENT ON COLUMN TB_SIMULATION_CHOICES.SETTING_ID IS 'TB_SIMULATION_SETTINGS 테이블의 설정 ID 참조';
COMMENT ON COLUMN TB_SIMULATION_CHOICES.QUESTION_NUMBER IS '질문 번호';
COMMENT ON COLUMN TB_SIMULATION_CHOICES.CHOICE_TEXT IS '선택한 텍스트 (예: "이직을 결정한다")';


-- 21. TB_SIMULATION_RESULTS
CREATE TABLE TB_SIMULATION_RESULTS (
                                       RESULT_ID NUMBER(19) PRIMARY KEY,
                                       SETTING_ID NUMBER(19) NOT NULL,
                                       RESULT_SUMMARY CLOB NOT NULL,
                                       PERSONALITY_TYPE VARCHAR2(50) CHECK (PERSONALITY_TYPE IN (
        'INFP', 'ENFJ', 'INTJ', 'ENTP', 'INFJ', 'ENFP',
        'ISTJ', 'ESTJ', 'ISFJ', 'ESFJ', 'ISTP', 'ESTP',
        'INTP', 'ENTJ', 'ISFP', 'ESFP', NULL
    )),
                                       CREATED_AT DATE DEFAULT SYSDATE NOT NULL,
                                       CONSTRAINT FK_RESULT_SETTING FOREIGN KEY (SETTING_ID) REFERENCES TB_SIMULATION_SETTINGS(SETTING_ID) ON DELETE CASCADE
);

COMMENT ON TABLE TB_SIMULATION_RESULTS IS '시뮬레이션 분석 결과';
COMMENT ON COLUMN TB_SIMULATION_RESULTS.RESULT_ID IS '시뮬레이션 결과의 고유 식별자';
COMMENT ON COLUMN TB_SIMULATION_RESULTS.SETTING_ID IS 'TB_SIMULATION_SETTINGS 테이블의 설정 ID 참조';
COMMENT ON COLUMN TB_SIMULATION_RESULTS.RESULT_SUMMARY IS 'AI가 생성한 성격 분석 요약';
COMMENT ON COLUMN TB_SIMULATION_RESULTS.PERSONALITY_TYPE IS '성격 유형';
COMMENT ON COLUMN TB_SIMULATION_RESULTS.CREATED_AT IS '결과 생성 시간';


-- 22. TB_NOTICES
CREATE TABLE TB_NOTICES (
                            NOTICE_ID NUMBER(19) PRIMARY KEY,
                            TITLE VARCHAR2(100) NOT NULL,
                            CONTENT CLOB NOT NULL,
                            READCOUNT NUMBER(19) DEFAULT 0,
                            ATTACHED_FILE BLOB,
                            CREATED_AT DATE DEFAULT SYSDATE NOT NULL,
                            UPDATED_AT DATE
);

COMMENT ON TABLE TB_NOTICES IS '공지사항 관리';
COMMENT ON COLUMN TB_NOTICES.NOTICE_ID IS '공지사항 고유 식별자';
COMMENT ON COLUMN TB_NOTICES.TITLE IS '공지 제목';
COMMENT ON COLUMN TB_NOTICES.CONTENT IS '공지 내용';
COMMENT ON COLUMN TB_NOTICES.READCOUNT IS '조회수';
COMMENT ON COLUMN TB_NOTICES.ATTACHED_FILE IS '첨부파일';
COMMENT ON COLUMN TB_NOTICES.CREATED_AT IS '작성 시간';
COMMENT ON COLUMN TB_NOTICES.UPDATED_AT IS '수정 시간';



-- 23. TB_INQUIRIES
CREATE TABLE TB_INQUIRIES (
                              INQUIRY_ID NUMBER(19) PRIMARY KEY,
                              USER_ID VARCHAR2(255) NOT NULL,
                              TITLE VARCHAR2(100) NOT NULL,
                              CONTENT CLOB NOT NULL,
                              STATUS VARCHAR2(20) DEFAULT 'PENDING' NOT NULL,
                              RESPONSE CLOB,
                              CREATED_AT DATE DEFAULT SYSDATE NOT NULL,
                              RESPONDED_AT DATE,

                              CONSTRAINT FK_INQUIRY_USER FOREIGN KEY (USER_ID) REFERENCES TB_USERS(USER_ID) ON DELETE CASCADE,
                              CONSTRAINT CHK_INQUIRY_STATUS CHECK (STATUS IN ('PENDING', 'ANSWERED', 'CLOSED'))
);

COMMENT ON TABLE TB_INQUIRIES IS '사용자 문의사항 관리';
COMMENT ON COLUMN TB_INQUIRIES.INQUIRY_ID IS '문의 고유 식별자';
COMMENT ON COLUMN TB_INQUIRIES.USER_ID IS 'TB_USERS 테이블의 사용자 ID 참조';
COMMENT ON COLUMN TB_INQUIRIES.TITLE IS '문의 제목';
COMMENT ON COLUMN TB_INQUIRIES.CONTENT IS '문의 내용';
COMMENT ON COLUMN TB_INQUIRIES.STATUS IS '문의 상태 (PENDING: 대기, ANSWERED: 답변 완료, CLOSED: 종료)';
COMMENT ON COLUMN TB_INQUIRIES.RESPONSE IS '관리자 답변 내용';
COMMENT ON COLUMN TB_INQUIRIES.CREATED_AT IS '문의 생성 시간';
COMMENT ON COLUMN TB_INQUIRIES.RESPONDED_AT IS '답변 시간';


-- 24. TB_COMMENTS
CREATE TABLE TB_COMMENTS (
                             COMMENT_ID NUMBER(19) PRIMARY KEY,
                             CONTENT CLOB NOT NULL,
                             CREATED_AT DATE DEFAULT SYSDATE NOT NULL
);

COMMENT ON TABLE TB_COMMENTS IS '사용자 댓글 관리';
COMMENT ON COLUMN TB_COMMENTS.COMMENT_ID IS '댓글 고유 식별자';
COMMENT ON COLUMN TB_COMMENTS.CONTENT IS '댓글 내용';
COMMENT ON COLUMN TB_COMMENTS.CREATED_AT IS '댓글 생성 시간';


-- 25. TB_SYSTEM_LOGS
CREATE TABLE TB_SYSTEM_LOGS (
                                LOG_ID NUMBER(19) PRIMARY KEY,
                                USER_ID VARCHAR2(255),
                                ACTION VARCHAR2(100) NOT NULL,
                                SEVERITY VARCHAR2(50) NOT NULL,
                                BEFORE_DATA CLOB,
                                AFTER_DATA CLOB,
                                CREATED_AT DATE DEFAULT SYSDATE NOT NULL,

                                CONSTRAINT FK_SYSTEMLOG_USER FOREIGN KEY (USER_ID) REFERENCES TB_USERS(USER_ID) ON DELETE CASCADE,
                                CONSTRAINT CHK_SYSTEMLOG_SEVERITY CHECK (SEVERITY IN ('INFO', 'WARN', 'ERROR', 'CRITICAL'))
);

COMMENT ON TABLE TB_SYSTEM_LOGS IS '시스템 변경 로그';
COMMENT ON COLUMN TB_SYSTEM_LOGS.LOG_ID IS '로그 고유 식별자';
COMMENT ON COLUMN TB_SYSTEM_LOGS.USER_ID IS 'TB_USERS 테이블의 사용자 ID 참조';
COMMENT ON COLUMN TB_SYSTEM_LOGS.ACTION IS '변경 항목 (예: 사용자 정보 수정)';
COMMENT ON COLUMN TB_SYSTEM_LOGS.SEVERITY IS '로그의 심각도 (예: INFO, WARN, ERROR, CRITICAL)';
COMMENT ON COLUMN TB_SYSTEM_LOGS.BEFORE_DATA IS '변경 전 데이터';
COMMENT ON COLUMN TB_SYSTEM_LOGS.AFTER_DATA IS '변경 후 데이터';
COMMENT ON COLUMN TB_SYSTEM_LOGS.CREATED_AT IS '로그 생성 시간';


-- 26. TB_USER_ANALYSIS_SUMMARY
CREATE TABLE TB_USER_ANALYSIS_SUMMARY (
                                          USER_SUMMARY_ID NUMBER(19) CONSTRAINT PK_USER_SUMMARY_ID PRIMARY KEY,
                                          USER_ID VARCHAR2(255),
                                          LAST_UPDATED DATE DEFAULT SYSDATE,
                                          PSYCHO_ID NUMBER(19),
                                          PERSONALITY_ID NUMBER(19),
                                          EMOTION_LOG_ID NUMBER(19),
                                          SUMMARY_ID NUMBER(19),
                                          RESULT_ID NUMBER(19),
                                          ANALYSIS_COMMENT CLOB,

                                          CONSTRAINT FK_ANALYSIS_USER FOREIGN KEY (USER_ID) REFERENCES TB_USERS(USER_ID) ON DELETE CASCADE,
                                          CONSTRAINT FK_ANALYSIS_PSYCHO FOREIGN KEY (PSYCHO_ID) REFERENCES TB_PSYCHOLOGICAL_ANALYSIS(PSYCHO_ID) ON DELETE CASCADE,
                                          CONSTRAINT FK_ANALYSIS_PERSONALITY FOREIGN KEY (PERSONALITY_ID) REFERENCES TB_PERSONALITY_ANALYSIS(PERSONALITY_ID) ON DELETE CASCADE,
                                          CONSTRAINT FK_ANALYSIS_EMOTION FOREIGN KEY (EMOTION_LOG_ID) REFERENCES TB_EMOTION_LOGS(EMOTION_LOG_ID) ON DELETE CASCADE,
                                          CONSTRAINT FK_ANALYSIS_SUMMARY FOREIGN KEY (SUMMARY_ID) REFERENCES TB_COUNSELING_ANALYSIS_SUMMARIES(SUMMARY_ID) ON DELETE CASCADE,
                                          CONSTRAINT FK_ANALYSIS_RESULT FOREIGN KEY (RESULT_ID) REFERENCES TB_SIMULATION_RESULTS(RESULT_ID) ON DELETE CASCADE
);

COMMENT ON TABLE TB_USER_ANALYSIS_SUMMARY IS '사용자별 종합 분석 요약';
COMMENT ON COLUMN TB_USER_ANALYSIS_SUMMARY.USER_SUMMARY_ID IS '종합 분석 요약의 고유 식별자, 각 분석 요약을 고유하게 구분';
COMMENT ON COLUMN TB_USER_ANALYSIS_SUMMARY.USER_ID IS 'TB_USERS 테이블의 사용자 ID 참조';
COMMENT ON COLUMN TB_USER_ANALYSIS_SUMMARY.LAST_UPDATED IS '최종 업데이트 시간';
COMMENT ON COLUMN TB_USER_ANALYSIS_SUMMARY.PSYCHO_ID IS 'TB_PSYCHOLOGICAL_ANALYSIS 테이블 참조';
COMMENT ON COLUMN TB_USER_ANALYSIS_SUMMARY.PERSONALITY_ID IS 'TB_PERSONALITY_ANALYSIS 테이블 참조';
COMMENT ON COLUMN TB_USER_ANALYSIS_SUMMARY.EMOTION_LOG_ID IS 'TB_EMOTION_LOGS 테이블 참조';
COMMENT ON COLUMN TB_USER_ANALYSIS_SUMMARY.SUMMARY_ID IS 'TB_COUNSELING_ANALYSIS_SUMMARIES 테이블 참조';
COMMENT ON COLUMN TB_USER_ANALYSIS_SUMMARY.RESULT_ID IS 'TB_SIMULATION_RESULTS 테이블 참조';
COMMENT ON COLUMN TB_USER_ANALYSIS_SUMMARY.ANALYSIS_COMMENT IS 'AI 종합 분석 코멘트';


-- 27. TB_QUEST_REWARDS
CREATE TABLE TB_QUEST_REWARDS (
                                  REWARD_ID NUMBER(19) PRIMARY KEY,
                                  QUEST_NAME VARCHAR2(100) NOT NULL,
                                  REQUIRED_POINTS NUMBER(5,2) NOT NULL CHECK (REQUIRED_POINTS BETWEEN 0 AND 100),
                                  REWARD_TYPE VARCHAR2(20) DEFAULT 'TITLE' NOT NULL CHECK (REWARD_TYPE IN ('TITLE', 'POINTS')),
                                  TITLE_REWARD VARCHAR2(50),
                                  POINTS_REWARD NUMBER(10),
                                  DESCRIPTION CLOB
);

COMMENT ON TABLE TB_QUEST_REWARDS IS '퀘스트 보상';
COMMENT ON COLUMN TB_QUEST_REWARDS.QUEST_NAME IS '퀘스트 이름';
COMMENT ON COLUMN TB_QUEST_REWARDS.REQUIRED_POINTS IS '보상 획득 필요 점수';
COMMENT ON COLUMN TB_QUEST_REWARDS.REWARD_TYPE IS '보상 유형';
COMMENT ON COLUMN TB_QUEST_REWARDS.TITLE_REWARD IS '칭호 보상';
COMMENT ON COLUMN TB_QUEST_REWARDS.POINTS_REWARD IS '포인트 보상';
COMMENT ON COLUMN TB_QUEST_REWARDS.DESCRIPTION IS '퀘스트 보상 설명';


-- 28. TB_FEEDBACK_RECOMMENDATIONS
CREATE TABLE TB_FEEDBACK_RECOMMENDATIONS (
                                             FEEDBACK_ID NUMBER(19) PRIMARY KEY,
                                             USER_ID VARCHAR2(255) NOT NULL,
                                             USER_SUMMARY_ID NUMBER(19),
                                             GUIDANCE_TYPE_ID NUMBER(19) NOT NULL,
                                             REWARD_ID NUMBER(19),
                                             CONTENT CLOB NOT NULL,
                                             PROGRESS NUMBER(5,2) DEFAULT 0 CHECK (PROGRESS BETWEEN 0 AND 100),
                                             IS_COMPLETED NUMBER(1) DEFAULT 0 NOT NULL CHECK (IS_COMPLETED IN (0, 1)),
                                             CREATED_AT DATE DEFAULT SYSDATE NOT NULL,

                                             CONSTRAINT FK_FEEDBACK_USER FOREIGN KEY (USER_ID) REFERENCES TB_USERS(USER_ID) ON DELETE CASCADE,
                                             CONSTRAINT FK_FEEDBACK_USER_SUMMARY FOREIGN KEY (USER_SUMMARY_ID) REFERENCES TB_USER_ANALYSIS_SUMMARY(USER_SUMMARY_ID) ON DELETE CASCADE,
                                             CONSTRAINT FK_FEEDBACK_GUIDANCE_TYPE FOREIGN KEY (GUIDANCE_TYPE_ID) REFERENCES TB_GUIDANCE_TYPES(GUIDANCE_TYPE_ID) ON DELETE CASCADE,
                                             CONSTRAINT FK_FEEDBACK_QUEST FOREIGN KEY (REWARD_ID) REFERENCES TB_QUEST_REWARDS(REWARD_ID) ON DELETE CASCADE
);

COMMENT ON TABLE TB_FEEDBACK_RECOMMENDATIONS IS 'AI 추천 퀘스트';
COMMENT ON COLUMN TB_FEEDBACK_RECOMMENDATIONS.FEEDBACK_ID IS '피드백 고유 ID';
COMMENT ON COLUMN TB_FEEDBACK_RECOMMENDATIONS.USER_ID IS '사용자 ID';
COMMENT ON COLUMN TB_FEEDBACK_RECOMMENDATIONS.USER_SUMMARY_ID IS '분석 요약 ID';
COMMENT ON COLUMN TB_FEEDBACK_RECOMMENDATIONS.GUIDANCE_TYPE_ID IS '가이드 유형 ID';
COMMENT ON COLUMN TB_FEEDBACK_RECOMMENDATIONS.REWARD_ID IS '퀘스트 보상 ID';
COMMENT ON COLUMN TB_FEEDBACK_RECOMMENDATIONS.CONTENT IS '추천 내용';
COMMENT ON COLUMN TB_FEEDBACK_RECOMMENDATIONS.PROGRESS IS '진행률 (0~100)';
COMMENT ON COLUMN TB_FEEDBACK_RECOMMENDATIONS.IS_COMPLETED IS '완료 여부 (0/1)';
COMMENT ON COLUMN TB_FEEDBACK_RECOMMENDATIONS.CREATED_AT IS '생성 시간';


-- 29. TB_CONTENTS
CREATE TABLE TB_CONTENTS (
                             USER_ID VARCHAR2(255),
                             CONTENT_ID NUMBER(19) PRIMARY KEY,
                             GUIDANCE_TYPE_ID NUMBER(19),
                             USER_SUMMARY_ID NUMBER(19),
                             TITLE VARCHAR2(100) NOT NULL,
                             URL VARCHAR2(255) NOT NULL,
                             SOURCE VARCHAR2(100),

                             CONSTRAINT FK_CONTENT_USER FOREIGN KEY (USER_ID) REFERENCES TB_USERS(USER_ID) ON DELETE SET NULL,
                             CONSTRAINT FK_CONTENT_GUIDANCE_TYPE FOREIGN KEY (GUIDANCE_TYPE_ID) REFERENCES TB_GUIDANCE_TYPES(GUIDANCE_TYPE_ID) ON DELETE SET NULL,
                             CONSTRAINT FK_CONTENT_USER_SUMMARY FOREIGN KEY (USER_SUMMARY_ID) REFERENCES TB_USER_ANALYSIS_SUMMARY(USER_SUMMARY_ID) ON DELETE SET NULL
);

COMMENT ON TABLE TB_CONTENTS IS 'AI 추천 콘텐츠';
COMMENT ON COLUMN TB_CONTENTS.USER_ID IS '사용자 ID';
COMMENT ON COLUMN TB_CONTENTS.CONTENT_ID IS '콘텐츠 ID';
COMMENT ON COLUMN TB_CONTENTS.GUIDANCE_TYPE_ID IS '가이드 유형 ID';
COMMENT ON COLUMN TB_CONTENTS.USER_SUMMARY_ID IS '사용자 분석 요약 ID';
COMMENT ON COLUMN TB_CONTENTS.TITLE IS '콘텐츠 제목';
COMMENT ON COLUMN TB_CONTENTS.URL IS '콘텐츠 URL';
COMMENT ON COLUMN TB_CONTENTS.SOURCE IS '콘텐츠 출처';


-- 30. TB_USER_POINTS (신규 테이블)
CREATE TABLE TB_USER_POINTS (
                                USER_ID VARCHAR2(255) PRIMARY KEY,
                                POINTS NUMBER(10) DEFAULT 0 NOT NULL,
                                USER_LEVEL NUMBER(5) DEFAULT 1 NOT NULL CHECK (USER_LEVEL >= 1), -- LEVEL → USER_LEVEL
                                LEVEL_POINTS_THRESHOLD NUMBER(10) DEFAULT 100 NOT NULL,
                                CONSTRAINT FK_USER_POINTS_USER FOREIGN KEY (USER_ID) REFERENCES TB_USERS(USER_ID) ON DELETE CASCADE
);

COMMENT ON TABLE TB_USER_POINTS IS '사용자 포인트 및 레벨 관리';
COMMENT ON COLUMN TB_USER_POINTS.USER_ID IS '사용자 ID';
COMMENT ON COLUMN TB_USER_POINTS.POINTS IS '사용자 보유 포인트';
COMMENT ON COLUMN TB_USER_POINTS.USER_LEVEL IS '사용자 현재 레벨';
COMMENT ON COLUMN TB_USER_POINTS.LEVEL_POINTS_THRESHOLD IS '다음 레벨로 승급하기 위한 필요 포인트';

-- 31. TB_USER_REWARDS (신규 테이블)
-- 사용자가 구매하거나 획득한 보상 관리
CREATE TABLE TB_USER_REWARDS (
                                 USER_REWARD_ID NUMBER(19) PRIMARY KEY,
                                 USER_ID VARCHAR2(255) NOT NULL,
                                 REWARD_ID NUMBER(19) NOT NULL,
                                 ACQUIRED_AT DATE DEFAULT SYSDATE,
                                 IS_APPLIED NUMBER(1) DEFAULT 0 CHECK (IS_APPLIED IN (0, 1)), -- 보상 적용 여부
                                 CONSTRAINT FK_USER_REWARD_USER FOREIGN KEY (USER_ID) REFERENCES TB_USERS(USER_ID) ON DELETE CASCADE,
                                 CONSTRAINT FK_USER_REWARD_REWARD FOREIGN KEY (REWARD_ID) REFERENCES TB_QUEST_REWARDS(REWARD_ID) ON DELETE CASCADE,
                                 CONSTRAINT UK_USER_REWARD UNIQUE (USER_ID, REWARD_ID)
);

COMMENT ON TABLE TB_USER_REWARDS IS '사용자가 획득 또는 구매한 보상 관리';
COMMENT ON COLUMN TB_USER_REWARDS.USER_REWARD_ID IS '사용자 보상 고유 ID';
COMMENT ON COLUMN TB_USER_REWARDS.USER_ID IS '사용자 ID';
COMMENT ON COLUMN TB_USER_REWARDS.REWARD_ID IS 'TB_QUEST_REWARDS 테이블의 보상 ID';
COMMENT ON COLUMN TB_USER_REWARDS.ACQUIRED_AT IS '구매 일시';
COMMENT ON COLUMN TB_USER_REWARDS.IS_APPLIED IS '보상 적용 여부 (0: 미적용, 1: 적용)';

-- 사용자가 여러개의 보상 중 하나만 적용하도록 하려면

-- 1단계: 기존 적용 칭호 해제
UPDATE TB_USER_REWARDS
SET IS_APPLIED = 0
WHERE USER_ID = :userId AND IS_APPLIED = 1;

-- 2단계: 새 칭호 적용
UPDATE TB_USER_REWARDS
SET IS_APPLIED = 1
WHERE USER_ID = :userId AND REWARD_ID = :selectedRewardId;






-- 트리거

-- 1. 생성/수정 시간 자동처리
-- 1. TRG_COMMENT_TIME
CREATE OR REPLACE TRIGGER TRG_COMMENT_TIME
BEFORE INSERT OR UPDATE ON TB_COMMENTS
                            FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.CREATED_AT := SYSDATE;
  ELSIF UPDATING THEN
    :NEW.CREATED_AT := NVL(:OLD.CREATED_AT, SYSDATE);
END IF;
END;
/

-- 2. TRG_NOTICE_TIME (변경 없음)
CREATE OR REPLACE TRIGGER TRG_NOTICE_TIME
BEFORE INSERT OR UPDATE ON TB_NOTICES
                            FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.CREATED_AT := SYSDATE;
    :NEW.UPDATED_AT := NULL;
  ELSIF UPDATING THEN
    :NEW.CREATED_AT := NVL(:OLD.CREATED_AT, SYSDATE);
    :NEW.UPDATED_AT := SYSDATE;
END IF;
END;
/

-- 3. TRG_INQUIRIES_TIME (변경 없음)
CREATE OR REPLACE TRIGGER TRG_INQUIRIES_TIME
BEFORE INSERT OR UPDATE ON TB_INQUIRIES
                            FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.CREATED_AT := SYSDATE;
  ELSIF UPDATING THEN
    :NEW.CREATED_AT := NVL(:OLD.CREATED_AT, SYSDATE);
END IF;
END;
/

-- 4. TRG_USER_UPDATE_AUDIT
CREATE OR REPLACE TRIGGER TRG_USER_UPDATE_AUDIT
AFTER UPDATE ON TB_USERS
                 FOR EACH ROW
BEGIN
  IF (:OLD.PASSWORD_HASH != :NEW.PASSWORD_HASH OR
      (:OLD.PASSWORD_HASH IS NULL AND :NEW.PASSWORD_HASH IS NOT NULL) OR
      (:OLD.PASSWORD_HASH IS NOT NULL AND :NEW.PASSWORD_HASH IS NULL) OR
      :OLD.STATUS != :NEW.STATUS OR
      (:OLD.STATUS IS NULL AND :NEW.STATUS IS NOT NULL) OR
      (:OLD.STATUS IS NOT NULL AND :NEW.STATUS IS NULL)) THEN
    INSERT INTO TB_SYSTEM_LOGS (
      LOG_ID,
      USER_ID,
      ACTION,
      BEFORE_DATA,
      AFTER_DATA,
      CREATED_AT
    ) VALUES (
      SEQ_SYSTEM_LOGS_LOG_ID.NEXTVAL,
      :NEW.USER_ID,
      'USER UPDATE',
      'PWD: ' || NVL(:OLD.PASSWORD_HASH, 'NULL') || ', STATUS: ' || NVL(:OLD.STATUS, 'NULL'),
      'PWD: ' || NVL(:NEW.PASSWORD_HASH, 'NULL') || ', STATUS: ' || NVL(:NEW.STATUS, 'NULL'),
      SYSDATE
    );
END IF;
END;
/

-- 5. TRG_FEEDBACK_COMPLETION_REWARD
CREATE OR REPLACE TRIGGER TRG_FEEDBACK_COMPLETION_REWARD
AFTER UPDATE ON TB_FEEDBACK_RECOMMENDATIONS
                 FOR EACH ROW
                 WHEN (NEW.IS_COMPLETED = 1 AND OLD.IS_COMPLETED = 0)
DECLARE
v_points_reward NUMBER := 0;
  v_reward_type VARCHAR2(20);
  v_user_exists NUMBER;
  v_current_points NUMBER;
  v_current_level NUMBER;
  v_threshold NUMBER;
BEGIN
  -- REWARD_ID가 NULL이면 처리 중단
  IF :NEW.REWARD_ID IS NULL THEN
    RETURN;
END IF;

  -- TB_QUEST_REWARDS에서 보상 정보 조회
BEGIN
SELECT NVL(POINTS_REWARD, 0), REWARD_TYPE
INTO v_points_reward, v_reward_type
FROM TB_QUEST_REWARDS
WHERE REWARD_ID = :NEW.REWARD_ID;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
      RETURN;
END;

  -- TB_USER_POINTS 레코드 존재 여부 확인
SELECT COUNT(*)
INTO v_user_exists
FROM TB_USER_POINTS
WHERE USER_ID = :NEW.USER_ID;

-- 동시성 제어를 위해 TB_USER_POINTS 잠금
IF v_user_exists = 0 THEN
    INSERT INTO TB_USER_POINTS (USER_ID, POINTS, USER_LEVEL, LEVEL_POINTS_THRESHOLD)
    VALUES (:NEW.USER_ID, v_points_reward, 1, 100);
ELSE
UPDATE TB_USER_POINTS
SET POINTS = POINTS + v_points_reward
WHERE USER_ID = :NEW.USER_ID;

-- 레벨 승급 로직
SELECT POINTS, USER_LEVEL, LEVEL_POINTS_THRESHOLD
INTO v_current_points, v_current_level, v_threshold
FROM TB_USER_POINTS
WHERE USER_ID = :NEW.USER_ID FOR UPDATE;

IF v_current_points >= v_threshold THEN
UPDATE TB_USER_POINTS
SET USER_LEVEL = USER_LEVEL + 1,
    LEVEL_POINTS_THRESHOLD = LEVEL_POINTS_THRESHOLD * 1.5
WHERE USER_ID = :NEW.USER_ID;
END IF;
END IF;

  -- TB_USER_REWARDS에 보상 기록
INSERT INTO TB_USER_REWARDS (USER_REWARD_ID, USER_ID, REWARD_ID, IS_APPLIED)
VALUES (SEQ_USER_REWARDS_USER_REWARD_ID.NEXTVAL, :NEW.USER_ID, :NEW.REWARD_ID,
        CASE WHEN v_reward_type = 'TITLE' THEN 1 ELSE 0 END);
EXCEPTION
  WHEN DUP_VAL_ON_INDEX THEN
    NULL; -- UK_USER_REWARD 제약 위반 무시
WHEN OTHERS THEN
    RAISE_APPLICATION_ERROR(-20001, 'Error in reward processing: ' || SQLERRM);
END;
/


-- 4. 결과 입력 시 사용자 요약 정보 업데이트
-- CREATE OR REPLACE TRIGGER TRG_SIMULATION_RESULT_SUMMARY
-- AFTER INSERT ON TB_SIMULATION_RESULT
-- FOR EACH ROW
-- BEGIN
--   UPDATE TB_USER_ANALYSIS_SUMMARY
--   SET RESULT_ID = :NEW.RESULT_ID,
--       LAST_UPDATED = SYSDATE
--   WHERE USER_ID = (
--     SELECT USER_ID FROM TB_SIMULATION_SETTING WHERE SETTING_ID = :NEW.SETTING_ID
--   );
-- END;
-- /




COMMIT;


