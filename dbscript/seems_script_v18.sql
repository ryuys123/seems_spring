-- 시퀀스 드롭

--DROP SEQUENCE SEQ_USERS_USER_ID;
DROP SEQUENCE SEQ_REFRESH_TOKENS_ID;
DROP SEQUENCE SEQ_USER_SOCIAL_LOGIN_SOCIAL_LOGIN_ID;
DROP SEQUENCE SEQ_USER_FACE_LOGIN_FACE_LOGIN_ID;
DROP SEQUENCE SEQ_LOGIN_HISTORY_LOGIN_HISTORY_ID;
DROP SEQUENCE SEQ_COUNSELING_SESSIONS_SESSION_ID;
DROP SEQUENCE SEQ_COUNSELING_MESSAGES_MESSAGE_ID;
DROP SEQUENCE SEQ_COUNSELING_ANALYSIS_SUMMARIES_SUMMARY_ID;
DROP SEQUENCE SEQ_GUIDANCE_TYPES_GUIDANCE_TYPE_ID;
DROP SEQUENCE SEQ_EMOTIONS_EMOTION_ID;
DROP SEQUENCE SEQ_EMOTION_LOGS_EMOTION_LOG_ID;
DROP SEQUENCE SEQ_TEST_QUESTIONS_QUESTION_ID;
DROP SEQUENCE SEQ_PERSONALITY_TEST_ANSWERS_ANSWER_ID;
DROP SEQUENCE SEQ_PERSONALITY_ANALYSIS_PERSONALITY_ID;
DROP SEQUENCE SEQ_PSYCHOLOGICAL_TEST_ANSWERS_ANSWER_ID;
DROP SEQUENCE SEQ_PSYCHOLOGICAL_ANALYSIS_PSYCHO_ID;
DROP SEQUENCE SEQ_USER_ANALYSIS_SUMMARY_USER_SUMMARY_ID;
DROP SEQUENCE SEQ_FEEDBACK_RECOMMENDATIONS_FEEDBACK_ID;
DROP SEQUENCE SEQ_QUEST_REWARDS_QUEST_ID;
DROP SEQUENCE SEQ_CONTENTS_CONTENT_ID;
DROP SEQUENCE SEQ_SIMULATION_SCENARIOS_SCENARIO_ID;
DROP SEQUENCE SEQ_SIMULATION_SETTINGS_SETTING_ID;
DROP SEQUENCE SEQ_SIMULATION_QUESTIONS_QUESTION_ID;
DROP SEQUENCE SEQ_SIMULATION_CHOICES_CHOICE_ID;
DROP SEQUENCE SEQ_SIMULATION_RESULTS_RESULT_ID;
DROP SEQUENCE SEQ_NOTICES_NOTICE_NO;
DROP SEQUENCE SEQ_INQUIRIES_INQUIRY_ID;
DROP SEQUENCE SEQ_COMMENTS_COMMENT_ID;
DROP SEQUENCE SEQ_SYSTEM_LOGS_LOG_ID;
DROP SEQUENCE SEQ_ANALYSIS_TYPES_ANALYSIS_TYPE_ID;
DROP SEQUENCE SEQ_PERSONALITY_TESTS_PERSONALITY_TEST_ID;
DROP SEQUENCE SEQ_PSYCHOLOGICAL_TESTS_PSYCHO_TEST_ID;
DROP SEQUENCE SEQ_CONTENT_RECOMMENDATIONS_RECOMMENDATION_ID;
DROP SEQUENCE SEQ_USER_REWARDS_USER_REWARD_ID;
-- 추가
DROP SEQUENCE PSYCHOLOGICAL_ANSWER_SEQ;
DROP SEQUENCE PSYCHOLOGICAL_ANALYSIS_SEQ;
DROP SEQUENCE ANSWER_SEQ;
DROP SEQUENCE RESULT_SEQ;
DROP SEQUENCE QUESTION_SEQ;

-- 테이블 드롭

DROP TABLE TB_FEEDBACK_RECOMMENDATIONS CASCADE CONSTRAINTS;
DROP TABLE TB_PERSONALITY_TEST_ANSWERS CASCADE CONSTRAINTS;
DROP TABLE TB_PSYCHOLOGICAL_TEST_ANSWERS CASCADE CONSTRAINTS;
DROP TABLE TB_SIMULATION_CHOICES CASCADE CONSTRAINTS;
DROP TABLE TB_SIMULATION_RESULTS CASCADE CONSTRAINTS;
DROP TABLE TB_USER_ANALYSIS_SUMMARY CASCADE CONSTRAINTS;
DROP TABLE TB_PERSONALITY_ANALYSIS CASCADE CONSTRAINTS;
DROP TABLE TB_PSYCHOLOGICAL_ANALYSIS CASCADE CONSTRAINTS;
DROP TABLE TB_COUNSELING_MESSAGES CASCADE CONSTRAINTS;
DROP TABLE TB_COUNSELING_ANALYSIS_SUMMARIES CASCADE CONSTRAINTS;
DROP TABLE TB_SIMULATION_SETTINGS CASCADE CONSTRAINTS;
DROP TABLE TB_SIMULATION_QUESTIONS CASCADE CONSTRAINTS;
DROP TABLE TB_EMOTION_LOGS CASCADE CONSTRAINTS;
DROP TABLE TB_COUNSELING_SESSIONS CASCADE CONSTRAINTS;
DROP TABLE TB_LOGIN_HISTORY CASCADE CONSTRAINTS;
DROP TABLE TB_USER_SOCIAL_LOGIN CASCADE CONSTRAINTS;
DROP TABLE TB_USER_FACE_LOGIN CASCADE CONSTRAINTS;
DROP TABLE TB_CONTENTS CASCADE CONSTRAINTS;
DROP TABLE TB_INQUIRIES CASCADE CONSTRAINTS;
DROP TABLE TB_SYSTEM_LOGS CASCADE CONSTRAINTS;
DROP TABLE TB_TEST_QUESTIONS CASCADE CONSTRAINTS;
DROP TABLE TB_QUEST_REWARDS CASCADE CONSTRAINTS;
DROP TABLE TB_SIMULATION_SCENARIOS CASCADE CONSTRAINTS;
DROP TABLE TB_COMMENTS CASCADE CONSTRAINTS;
DROP TABLE TB_NOTICES CASCADE CONSTRAINTS;
DROP TABLE TB_EMOTIONS CASCADE CONSTRAINTS;
DROP TABLE TB_GUIDANCE_TYPES CASCADE CONSTRAINTS;
DROP TABLE TB_REFRESH_TOKENS CASCADE CONSTRAINTS;
DROP TABLE TB_USERS CASCADE CONSTRAINTS;
DROP TABLE TB_USER_POINTS CASCADE CONSTRAINTS;
DROP TABLE TB_USER_REWARDS CASCADE CONSTRAINTS;



-- 시퀀스 생성

--CREATE SEQUENCE SEQ_USERS_USER_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_REFRESH_TOKENS_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_USER_SOCIAL_LOGIN_SOCIAL_LOGIN_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_USER_FACE_LOGIN_FACE_LOGIN_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_LOGIN_HISTORY_LOGIN_HISTORY_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_COUNSELING_SESSIONS_SESSION_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_COUNSELING_MESSAGES_MESSAGE_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_COUNSELING_ANALYSIS_SUMMARIES_SUMMARY_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_GUIDANCE_TYPES_GUIDANCE_TYPE_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_EMOTIONS_EMOTION_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_EMOTION_LOGS_EMOTION_LOG_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_TEST_QUESTIONS_QUESTION_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_PERSONALITY_TEST_ANSWERS_ANSWER_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_PERSONALITY_ANALYSIS_PERSONALITY_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_PSYCHOLOGICAL_TEST_ANSWERS_ANSWER_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_PSYCHOLOGICAL_ANALYSIS_PSYCHO_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_USER_ANALYSIS_SUMMARY_USER_SUMMARY_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_FEEDBACK_RECOMMENDATIONS_FEEDBACK_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_QUEST_REWARDS_QUEST_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_CONTENTS_CONTENT_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_SIMULATION_SCENARIOS_SCENARIO_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_SIMULATION_SETTINGS_SETTING_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_SIMULATION_QUESTIONS_QUESTION_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_SIMULATION_CHOICES_CHOICE_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_SIMULATION_RESULTS_RESULT_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_NOTICES_NOTICE_NO START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_INQUIRIES_INQUIRY_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_COMMENTS_COMMENT_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_SYSTEM_LOGS_LOG_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_ANALYSIS_TYPES_ANALYSIS_TYPE_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_PERSONALITY_TESTS_PERSONALITY_TEST_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_PSYCHOLOGICAL_TESTS_PSYCHO_TEST_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_CONTENT_RECOMMENDATIONS_RECOMMENDATION_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
CREATE SEQUENCE SEQ_USER_REWARDS_USER_REWARD_ID START WITH 1 INCREMENT BY 1 CACHE 20 NOMAXVALUE;
-- 추가
CREATE SEQUENCE PSYCHOLOGICAL_ANALYSIS_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE ANSWER_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE RESULT_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE PSYCHOLOGICAL_ANSWER_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

CREATE SEQUENCE QUESTION_SEQ
    START WITH 1
    INCREMENT BY 1
    NOCACHE
NOCYCLE;

-- 테이블 생성

-- 1. TB_USERS
CREATE TABLE TB_USERS (
                          USER_ID VARCHAR2(255) PRIMARY KEY,
                          PHONE VARCHAR2(100) NOT NULL,
                          USER_PWD VARCHAR2(255),
                          USERNAME VARCHAR2(50) NOT NULL,
                          PROFILE_IMAGE VARCHAR2(500), -- 프로필 사진 (페이스 로그인과 별도)
                          EMAIL VARCHAR2(100), -- 이메일 (선택사항으로 변경)
                          FACE_LOGIN_ENABLED NUMBER(1) DEFAULT 0, -- 페이스 로그인 활성화 여부
                          CREATED_AT DATE DEFAULT SYSDATE NOT NULL,
                          UPDATED_AT DATE,
                          STATUS NUMBER(1) DEFAULT 1 NOT NULL,
                          ADMIN_YN VARCHAR2(1) DEFAULT 'N',

                          CONSTRAINT CHK_TB_USERS_STATUS CHECK (STATUS IN (1, 0)),
                          CONSTRAINT CHK_ADMIN_YN CHECK (ADMIN_YN IN ('Y', 'N')),
                          CONSTRAINT CHK_FACE_LOGIN_ENABLED CHECK (FACE_LOGIN_ENABLED IN (1, 0))
);

COMMENT ON TABLE TB_USERS IS '사용자 계정 정보';
COMMENT ON COLUMN TB_USERS.USER_ID IS '사용자 고유 식별자';
COMMENT ON COLUMN TB_USERS.PHONE IS '전화번호';
COMMENT ON COLUMN TB_USERS.USER_PWD IS '해시된 비밀번호 (자체 로그인)';
COMMENT ON COLUMN TB_USERS.USERNAME IS '사용자 이름';
COMMENT ON COLUMN TB_USERS.PROFILE_IMAGE IS '프로필 사진 이미지 (페이스 로그인과 별도)';
COMMENT ON COLUMN TB_USERS.EMAIL IS '사용자 이메일 주소 (선택사항)';
COMMENT ON COLUMN TB_USERS.FACE_LOGIN_ENABLED IS '페이스 로그인 활성화 여부 (1: 활성, 0: 비활성)';
COMMENT ON COLUMN TB_USERS.CREATED_AT IS '계정 생성 시간';
COMMENT ON COLUMN TB_USERS.UPDATED_AT IS '계정 정보 수정 시간';
COMMENT ON COLUMN TB_USERS.STATUS IS '계정 상태 (1: 활성, 0: 탈퇴)';
COMMENT ON COLUMN TB_USERS.ADMIN_YN IS '관리자 권한 여부';

-- 2. TB_REFRESH_TOKENS
CREATE TABLE TB_REFRESH_TOKENS (
                                   ID VARCHAR2(36) PRIMARY KEY,
                                   USER_ID VARCHAR2(255) NOT NULL,
                                   TOKEN_VALUE VARCHAR2(255) NOT NULL UNIQUE,
                                   CONSTRAINT FK_RT_USER_ID FOREIGN KEY (USER_ID) REFERENCES TB_USERS(USER_ID) ON DELETE CASCADE
);

COMMENT ON COLUMN TB_REFRESH_TOKENS.ID IS '등록용 ID';
COMMENT ON COLUMN TB_REFRESH_TOKENS.USER_ID IS '사용자 고유 ID (외래키)';
COMMENT ON COLUMN TB_REFRESH_TOKENS.TOKEN_VALUE IS '리프레시 토큰 값';

-- 3. TB_USER_SOCIAL_LOGIN
CREATE TABLE TB_USER_SOCIAL_LOGIN (
                                      SOCIAL_LOGIN_ID NUMBER(19) PRIMARY KEY,
                                      USER_ID VARCHAR2(255) NOT NULL,
                                      PROVIDER VARCHAR2(50) NOT NULL,
                                      SOCIAL_ID VARCHAR2(100) NOT NULL,
                                      LINKED_AT DATE DEFAULT SYSDATE NOT NULL,

                                      CONSTRAINT FK_SOCIAL_USER FOREIGN KEY (USER_ID) REFERENCES TB_USERS(USER_ID),
                                      CONSTRAINT UK_SOCIAL_PROVIDER_ID UNIQUE (PROVIDER, SOCIAL_ID)
);

COMMENT ON TABLE TB_USER_SOCIAL_LOGIN IS '소셜 로그인 연동 정보';
COMMENT ON COLUMN TB_USER_SOCIAL_LOGIN.SOCIAL_LOGIN_ID IS '소셜 로그인 고유 식별자';
COMMENT ON COLUMN TB_USER_SOCIAL_LOGIN.USER_ID IS 'TB_USERS 테이블의 사용자 ID (FK)';
COMMENT ON COLUMN TB_USER_SOCIAL_LOGIN.PROVIDER IS '소셜 로그인 제공자 (예: GOOGLE, KAKAO)';
COMMENT ON COLUMN TB_USER_SOCIAL_LOGIN.SOCIAL_ID IS '소셜 로그인 플랫폼에서의 고유 ID';
COMMENT ON COLUMN TB_USER_SOCIAL_LOGIN.LINKED_AT IS '소셜 로그인 계정이 연동된 시간';


-- 4. TB_USER_FACE_LOGIN
CREATE TABLE TB_USER_FACE_LOGIN (
                                    FACE_LOGIN_ID NUMBER(19) PRIMARY KEY,
                                    USER_ID VARCHAR2(255) NOT NULL,
                                    FACE_ID_HASH VARCHAR2(255) NOT NULL,
                                    FACE_IMAGE_PATH VARCHAR2(500), -- 실제 이미지 파일 경로 (선택사항)
                                    FACE_NAME VARCHAR2(100), -- 얼굴 등록명 (예: "정면", "측면" 등)
                                    REGISTERED_AT DATE DEFAULT SYSDATE NOT NULL,
                                    LAST_USED_AT DATE,
                                    IS_ACTIVE NUMBER(1) DEFAULT 1 NOT NULL,
                                    CREATED_BY VARCHAR2(255), -- 등록한 사용자 (관리자 등록 시)

                                    CONSTRAINT FK_FACE_USER FOREIGN KEY (USER_ID) REFERENCES TB_USERS(USER_ID) ON DELETE CASCADE,
    -- CONSTRAINT UK_FACE_USER UNIQUE (USER_ID), -- 제거: 여러 얼굴 등록 허용
                                    CONSTRAINT CHK_FACE_ACTIVE CHECK (IS_ACTIVE IN (1, 0))
);

COMMENT ON TABLE TB_USER_FACE_LOGIN IS '사용자의 얼굴 인식 로그인 정보';
COMMENT ON COLUMN TB_USER_FACE_LOGIN.FACE_LOGIN_ID IS '얼굴 로그인 고유 식별자';
COMMENT ON COLUMN TB_USER_FACE_LOGIN.USER_ID IS 'TB_USERS 테이블의 사용자 ID (FK)';
COMMENT ON COLUMN TB_USER_FACE_LOGIN.FACE_ID_HASH IS '얼굴 특징값 해시 (민감정보 보호)';
COMMENT ON COLUMN TB_USER_FACE_LOGIN.FACE_IMAGE_PATH IS '얼굴 이미지 파일 경로 (선택사항)';
COMMENT ON COLUMN TB_USER_FACE_LOGIN.FACE_NAME IS '얼굴 등록명 (예: 정면, 측면)';
COMMENT ON COLUMN TB_USER_FACE_LOGIN.REGISTERED_AT IS '얼굴 로그인 등록 시간';
COMMENT ON COLUMN TB_USER_FACE_LOGIN.LAST_USED_AT IS '최근 얼굴 로그인 시도 시간';
COMMENT ON COLUMN TB_USER_FACE_LOGIN.IS_ACTIVE IS '얼굴 로그인 사용 상태 (1: 활성, 0: 비활성)';
COMMENT ON COLUMN TB_USER_FACE_LOGIN.CREATED_BY IS '얼굴 등록한 사용자 (관리자 등록 시)';


-- 5. TB_LOGIN_HISTORY
CREATE TABLE TB_LOGIN_HISTORY (
                                  LOGIN_HISTORY_ID NUMBER(19) PRIMARY KEY,
                                  USER_ID VARCHAR2(255) NOT NULL,
                                  LOGIN_TIME TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,
                                  LOGOUT_TIME TIMESTAMP NULL,
                                  IP_ADDRESS VARCHAR2(45),
                                  USER_AGENT VARCHAR2(255),
                                  LOGIN_RESULT VARCHAR2(20) NOT NULL,
                                  CREATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL,

                                  CONSTRAINT FK_LOGIN_USER FOREIGN KEY (USER_ID) REFERENCES TB_USERS(USER_ID) ON DELETE CASCADE
);

COMMENT ON TABLE TB_LOGIN_HISTORY IS '사용자 로그인 이력 기록';
COMMENT ON COLUMN TB_LOGIN_HISTORY.LOGIN_HISTORY_ID IS '로그인 이력 고유 식별자';
COMMENT ON COLUMN TB_LOGIN_HISTORY.USER_ID IS 'TB_USERS 테이블의 사용자 ID 참조';
COMMENT ON COLUMN TB_LOGIN_HISTORY.LOGIN_TIME IS '로그인 시각';
COMMENT ON COLUMN TB_LOGIN_HISTORY.LOGOUT_TIME IS '로그아웃 시각';
COMMENT ON COLUMN TB_LOGIN_HISTORY.IP_ADDRESS IS '사용자 접속 IP 주소';
COMMENT ON COLUMN TB_LOGIN_HISTORY.USER_AGENT IS '사용자 브라우저 및 디바이스 정보';
COMMENT ON COLUMN TB_LOGIN_HISTORY.LOGIN_RESULT IS '로그인 결과 (예: SUCCESS, FAIL)';
COMMENT ON COLUMN TB_LOGIN_HISTORY.CREATED_AT IS '로그 생성 시각';



-- 6. TB_COUNSELING_SESSIONS
CREATE TABLE TB_COUNSELING_SESSIONS (
                                        SESSION_ID NUMBER(19) PRIMARY KEY,
                                        USER_ID VARCHAR2(255) NOT NULL,
                                        TOPIC VARCHAR2(100) NOT NULL,
                                        METHOD VARCHAR2(10) NOT NULL,
                                        START_TIME DATE NOT NULL,
                                        END_TIME DATE,
                                        CREATED_AT DATE DEFAULT SYSDATE NOT NULL,

                                        CONSTRAINT FK_COUNSELING_USER FOREIGN KEY (USER_ID) REFERENCES TB_USERS(USER_ID) ON DELETE CASCADE,
                                        CONSTRAINT CHK_COUNSELING_METHOD CHECK (METHOD IN ('TEXT', 'VOICE'))
);

COMMENT ON TABLE TB_COUNSELING_SESSIONS IS '상담 챗봇 세션 기록';
COMMENT ON COLUMN TB_COUNSELING_SESSIONS.SESSION_ID IS '상담 세션 고유 식별자';
COMMENT ON COLUMN TB_COUNSELING_SESSIONS.USER_ID IS 'TB_USERS 테이블의 사용자 ID 참조';
COMMENT ON COLUMN TB_COUNSELING_SESSIONS.TOPIC IS '상담 주제 (예: 연애, 자아성찰)';
COMMENT ON COLUMN TB_COUNSELING_SESSIONS.METHOD IS '상담 방식 (TEXT, VOICE)';
COMMENT ON COLUMN TB_COUNSELING_SESSIONS.START_TIME IS '세션 시작 시간';
COMMENT ON COLUMN TB_COUNSELING_SESSIONS.END_TIME IS '세션 종료 시간';
COMMENT ON COLUMN TB_COUNSELING_SESSIONS.CREATED_AT IS '세션 생성 시간';


-- 7. TB_COUNSELING_MESSAGES
CREATE TABLE TB_COUNSELING_MESSAGES (
                                        MESSAGE_ID NUMBER(19) PRIMARY KEY,
                                        SESSION_ID NUMBER(19) NOT NULL,
                                        SENDER VARCHAR2(50) NOT NULL,
                                        MESSAGE_TYPE VARCHAR2(10) DEFAULT 'TEXT' CHECK (MESSAGE_TYPE IN ('TEXT', 'VOICE', 'IMAGE')),
                                        MESSAGE_CONTENT VARCHAR2(2000),
                                        IMAGE_FILE_PATH VARCHAR2(255),
                                        MESSAGE_TIME DATE NOT NULL,
                                        CREATED_AT DATE DEFAULT SYSDATE NOT NULL,

                                        CONSTRAINT FK_MESSAGE_SESSION FOREIGN KEY (SESSION_ID) REFERENCES TB_COUNSELING_SESSIONS(SESSION_ID) ON DELETE CASCADE
);

COMMENT ON TABLE TB_COUNSELING_MESSAGES IS '상담 세션의 개별 메시지 기록';
COMMENT ON COLUMN TB_COUNSELING_MESSAGES.MESSAGE_ID IS '메시지 고유 식별자';
COMMENT ON COLUMN TB_COUNSELING_MESSAGES.SESSION_ID IS 'TB_COUNSELING_SESSIONS 테이블의 세션 ID 참조';
COMMENT ON COLUMN TB_COUNSELING_MESSAGES.SENDER IS '메시지 발신자 (예: USER, BOT)';
COMMENT ON COLUMN TB_COUNSELING_MESSAGES.MESSAGE_TYPE IS '메시지 유형 (TEXT, VOICE, IMAGE)';
COMMENT ON COLUMN TB_COUNSELING_MESSAGES.MESSAGE_CONTENT IS '메시지 텍스트 내용';
COMMENT ON COLUMN TB_COUNSELING_MESSAGES.IMAGE_FILE_PATH IS '이미지 파일 경로 (예: 표정 캡처)';
COMMENT ON COLUMN TB_COUNSELING_MESSAGES.MESSAGE_TIME IS '메시지 전송 시간';
COMMENT ON COLUMN TB_COUNSELING_MESSAGES.CREATED_AT IS '메시지 생성 시간';


-- 8. TB_GUIDANCE_TYPES
CREATE TABLE TB_GUIDANCE_TYPES (
                                   GUIDANCE_TYPE_ID NUMBER(19) PRIMARY KEY,
                                   GUIDANCE_TYPE_NAME VARCHAR2(100) NOT NULL,
                                   DESCRIPTION VARCHAR2(255),

                                   CONSTRAINT UK_GUIDANCE_TYPE_NAME UNIQUE (GUIDANCE_TYPE_NAME)
);

COMMENT ON TABLE TB_GUIDANCE_TYPES IS '상담 가이드 유형';
COMMENT ON COLUMN TB_GUIDANCE_TYPES.GUIDANCE_TYPE_ID IS '가이드 유형의 고유 식별자';
COMMENT ON COLUMN TB_GUIDANCE_TYPES.GUIDANCE_TYPE_NAME IS '가이드 유형 이름 (예: 자기성찰, 관계 개선)';
COMMENT ON COLUMN TB_GUIDANCE_TYPES.DESCRIPTION IS '가이드 유형에 대한 설명 (예: 유형의 목적 및 특징)';


-- 9. TB_COUNSELING_ANALYSIS_SUMMARIES
CREATE TABLE TB_COUNSELING_ANALYSIS_SUMMARIES (
                                                  SUMMARY_ID NUMBER(19) PRIMARY KEY,
                                                  SESSION_ID NUMBER(19) NOT NULL,
                                                  SUMMARY_TYPE VARCHAR2(20) NOT NULL CHECK (SUMMARY_TYPE IN ('TEXT', 'VOICE')),
                                                  GUIDANCE_TYPE_ID NUMBER(19) NOT NULL,
                                                  SUMMARY_CONTENT VARCHAR2(2000) NOT NULL,
                                                  CREATED_AT DATE DEFAULT SYSDATE NOT NULL,

                                                  CONSTRAINT FK_SUMMARY_SESSION FOREIGN KEY (SESSION_ID) REFERENCES TB_COUNSELING_SESSIONS(SESSION_ID) ON DELETE CASCADE,
                                                  CONSTRAINT FK_SUMMARY_GUIDANCE_TYPE FOREIGN KEY (GUIDANCE_TYPE_ID) REFERENCES TB_GUIDANCE_TYPES(GUIDANCE_TYPE_ID) ON DELETE CASCADE
);

COMMENT ON TABLE TB_COUNSELING_ANALYSIS_SUMMARIES IS '상담 분석 요약';
COMMENT ON COLUMN TB_COUNSELING_ANALYSIS_SUMMARIES.SUMMARY_ID IS '상담 요약의 고유 식별자';
COMMENT ON COLUMN TB_COUNSELING_ANALYSIS_SUMMARIES.SESSION_ID IS 'TB_COUNSELING_SESSIONS 테이블의 세션 ID 참조, 요약 대상 상담 세션';
COMMENT ON COLUMN TB_COUNSELING_ANALYSIS_SUMMARIES.SUMMARY_TYPE IS '상담 분석 타입 (TEXT: 텍스트 기반, VOICE: 음성 기반)';
COMMENT ON COLUMN TB_COUNSELING_ANALYSIS_SUMMARIES.GUIDANCE_TYPE_ID IS 'TB_GUIDANCE_TYPES 테이블의 가이드 유형 ID 참조, 상담 유형(예: 자기성찰, 관계 개선)';
COMMENT ON COLUMN TB_COUNSELING_ANALYSIS_SUMMARIES.SUMMARY_CONTENT IS 'AI가 생성한 요약된 상담 내용 (예: 대화 주제, 감정 분석)';
COMMENT ON COLUMN TB_COUNSELING_ANALYSIS_SUMMARIES.CREATED_AT IS '요약 생성 시간, 기본값 SYSDATE';


-- 10. TB_EMOTIONS
CREATE TABLE TB_EMOTIONS (
                             EMOTION_ID NUMBER(19) PRIMARY KEY,
                             EMOTION_NAME VARCHAR2(50) NOT NULL,
                             DESCRIPTION VARCHAR2(255),
                             CONSTRAINT UK_EMOTION_NAME UNIQUE (EMOTION_NAME)
);

COMMENT ON TABLE TB_EMOTIONS IS '감정 유형 관리';
COMMENT ON COLUMN TB_EMOTIONS.EMOTION_ID IS '감정 고유 식별자';
COMMENT ON COLUMN TB_EMOTIONS.EMOTION_NAME IS '감정 이름 (예: 기쁨, 슬픔, 분노)';
COMMENT ON COLUMN TB_EMOTIONS.DESCRIPTION IS '감정 설명';


-- 11. TB_EMOTION_LOGS
CREATE TABLE TB_EMOTION_LOGS (
                                 EMOTION_LOG_ID NUMBER(19) PRIMARY KEY,
                                 USER_ID VARCHAR2(255) NOT NULL,
                                 EMOTION_ID NUMBER(19) NOT NULL,
                                 TEXT_CONTENT VARCHAR2(2000),
                                 CREATED_AT DATE DEFAULT SYSDATE NOT NULL,
                                 UPDATED_AT DATE,
                                 CONSTRAINT FK_EMOTION_USER FOREIGN KEY (USER_ID) REFERENCES TB_USERS(USER_ID) ON DELETE CASCADE,
                                 CONSTRAINT FK_EMOTION_EMOTION FOREIGN KEY (EMOTION_ID) REFERENCES TB_EMOTIONS(EMOTION_ID) ON DELETE CASCADE
);

COMMENT ON TABLE TB_EMOTION_LOGS IS '감정 기록';
COMMENT ON COLUMN TB_EMOTION_LOGS.EMOTION_LOG_ID IS '감정 로그 고유 식별자';
COMMENT ON COLUMN TB_EMOTION_LOGS.USER_ID IS 'TB_USERS 테이블의 사용자 ID 참조';
COMMENT ON COLUMN TB_EMOTION_LOGS.EMOTION_ID IS 'TB_EMOTIONS 테이블의 감정 ID 참조';
COMMENT ON COLUMN TB_EMOTION_LOGS.TEXT_CONTENT IS '텍스트로 기록한 감정 내용 (최대 4000자)';
COMMENT ON COLUMN TB_EMOTION_LOGS.CREATED_AT IS '기록 생성 시간';
COMMENT ON COLUMN TB_EMOTION_LOGS.UPDATED_AT IS '기록 수정 시간';

-- 12 TB_TEST_QUESTIONS 수정

CREATE TABLE TB_TEST_QUESTIONS (
                                   QUESTION_ID     NUMBER(19)      PRIMARY KEY,
                                   TEST_TYPE       VARCHAR2(50)    NOT NULL,
    -- 기존 QUESTION_TEXT의 NOT NULL 제약조건을 제거하고 NULL 허용
                                   QUESTION_TEXT   VARCHAR2(255) NOT NULL,
    -- 새롭게 추가된 이미지 URL 컬럼
                                   IMAGE_URL       VARCHAR2(255),
                                   WEIGHT          NUMBER(5,2)     DEFAULT 1.0,
                                   CATEGORY        VARCHAR2(50),
    -- MBTI 점수 가산 방향 (심리 검사 문항은 NULL)
                                   SCORE_DIRECTION VARCHAR2(10),
                                   CONSTRAINT CHK_TEST_TYPE CHECK (TEST_TYPE IN ('PSYCHOLOGICAL', 'PERSONALITY')),
                                   CONSTRAINT CK_TB_TQ_SCORE_DIR CHECK (
                                       SCORE_DIRECTION IS NULL OR
                                       SCORE_DIRECTION IN ('E', 'I', 'S', 'N', 'T', 'F', 'J', 'P')
                                       )
);
-- 테이블 및 컬럼 코멘트 추가
COMMENT ON TABLE TB_TEST_QUESTIONS IS '검사 문항';
COMMENT ON COLUMN TB_TEST_QUESTIONS.QUESTION_ID IS '문항 고유 식별자';
COMMENT ON COLUMN TB_TEST_QUESTIONS.TEST_TYPE IS '검사 유형 (PSYCHOLOGICAL: 심리검사, PERSONALITY: 성격검사)';
COMMENT ON COLUMN TB_TEST_QUESTIONS.QUESTION_TEXT IS '문항 내용 (텍스트 문항용 또는 이미지 문항의 보조 설명)';
COMMENT ON COLUMN TB_TEST_QUESTIONS.IMAGE_URL IS '제시될 이미지 파일의 URL 또는 경로 (이미지 기반 문항용)';
COMMENT ON COLUMN TB_TEST_QUESTIONS.WEIGHT IS '분석 가중치 (기본값 1.0)';
COMMENT ON COLUMN TB_TEST_QUESTIONS.CATEGORY IS '문항 카테고리 (예: STRESS, DEPRESSION, E_I, N_S, IMAGE_BASED)';
COMMENT ON COLUMN TB_TEST_QUESTIONS.SCORE_DIRECTION IS '문항의 점수 가산 방향 (MBTI: E, I, S, N, T, F, J, P 중 하나. 심리검사는 NULL)';

-- MBTI 성격 검사 문항 추가 SQL (총 32문항)
-- TEST_TYPE: 'PERSONALITY', WEIGHT: 1.0 (기본값)
-- SCORE_DIRECTION: E, I, S, N, T, F, J, P

-- E (외향) / I (내향) 척도 문항 (8개)
-- 'E' 지향 문항 (긍정 답변 시 E 점수 증가)
INSERT INTO TB_TEST_QUESTIONS (QUESTION_ID, TEST_TYPE, QUESTION_TEXT, WEIGHT, CATEGORY, SCORE_DIRECTION)
VALUES (1, 'PERSONALITY', '새로운 사람들과 만나는 것이 즐겁고 에너지가 넘치나요?', 1.0, 'E_I', 'E');
INSERT INTO TB_TEST_QUESTIONS (QUESTION_ID, TEST_TYPE, QUESTION_TEXT, WEIGHT, CATEGORY, SCORE_DIRECTION)
VALUES (2, 'PERSONALITY', '활동적인 모임이나 파티에 참여하는 것을 좋아하나요?', 1.0, 'E_I', 'E');
INSERT INTO TB_TEST_QUESTIONS (QUESTION_ID, TEST_TYPE, QUESTION_TEXT, WEIGHT, CATEGORY, SCORE_DIRECTION)
VALUES (3, 'PERSONALITY', '낯선 사람들에게 먼저 다가가고 쉽게 대화를 시작합니다.', 1.0, 'E_I', 'E');
INSERT INTO TB_TEST_QUESTIONS (QUESTION_ID, TEST_TYPE, QUESTION_TEXT, WEIGHT, CATEGORY, SCORE_DIRECTION)
VALUES (4, 'PERSONALITY', '대화를 통해 생각을 정리하고 표현하는 것이 더 편합니다.', 1.0, 'E_I', 'E');

-- 'I' 지향 문항 (긍정 답변 시 I 점수 증가)
INSERT INTO TB_TEST_QUESTIONS (QUESTION_ID, TEST_TYPE, QUESTION_TEXT, WEIGHT, CATEGORY, SCORE_DIRECTION)
VALUES (5, 'PERSONALITY', '혼자만의 시간을 가지며 깊이 생각하는 것을 즐깁니다.', 1.0, 'E_I', 'I');
INSERT INTO TB_TEST_QUESTIONS (QUESTION_ID, TEST_TYPE, QUESTION_TEXT, WEIGHT, CATEGORY, SCORE_DIRECTION)
VALUES (6, 'PERSONALITY', '조용하고 차분한 환경에서 에너지를 충전하는 편입니다.', 1.0, 'E_I', 'I');
INSERT INTO TB_TEST_QUESTIONS (QUESTION_ID, TEST_TYPE, QUESTION_TEXT, WEIGHT, CATEGORY, SCORE_DIRECTION)
VALUES (7, 'PERSONALITY', '타인과 대화하기보다 글이나 다른 방법으로 표현하는 것이 편합니다.', 1.0, 'E_I', 'I');
INSERT INTO TB_TEST_QUESTIONS (QUESTION_ID, TEST_TYPE, QUESTION_TEXT, WEIGHT, CATEGORY, SCORE_DIRECTION)
VALUES (8, 'PERSONALITY', '많은 사람들과 함께 있을 때 쉽게 지치거나 피로감을 느낍니다.', 1.0, 'E_I', 'I');


-- S (감각) / N (직관) 척도 문항 (8개)
-- 'S' 지향 문항
INSERT INTO TB_TEST_QUESTIONS (QUESTION_ID, TEST_TYPE, QUESTION_TEXT, WEIGHT, CATEGORY, SCORE_DIRECTION)
VALUES (9, 'PERSONALITY', '구체적이고 실용적인 사실에 근거하여 판단합니다.', 1.0, 'S_N', 'S');
INSERT INTO TB_TEST_QUESTIONS (QUESTION_ID, TEST_TYPE, QUESTION_TEXT, WEIGHT, CATEGORY, SCORE_DIRECTION)
VALUES (10, 'PERSONALITY', '현재의 경험과 직접적인 관찰을 중요하게 생각합니다.', 1.0, 'S_N', 'S');
INSERT INTO TB_TEST_QUESTIONS (QUESTION_ID, TEST_TYPE, QUESTION_TEXT, WEIGHT, CATEGORY, SCORE_DIRECTION)
VALUES (11, 'PERSONALITY', '세부사항을 놓치지 않고 꼼꼼하게 처리하는 편입니다.', 1.0, 'S_N', 'S');
INSERT INTO TB_TEST_QUESTIONS (QUESTION_ID, TEST_TYPE, QUESTION_TEXT, WEIGHT, CATEGORY, SCORE_DIRECTION)
VALUES (12, 'PERSONALITY', '새로운 것을 배울 때, 실제 사례를 통해 배우는 것을 선호합니다.', 1.0, 'S_N', 'S');

-- 'N' 지향 문항
INSERT INTO TB_TEST_QUESTIONS (QUESTION_ID, TEST_TYPE, QUESTION_TEXT, WEIGHT, CATEGORY, SCORE_DIRECTION)
VALUES (13, 'PERSONALITY', '미래의 가능성이나 숨겨진 의미를 탐구하는 데 흥미를 느낍니다.', 1.0, 'S_N', 'N');
INSERT INTO TB_TEST_QUESTIONS (QUESTION_ID, TEST_TYPE, QUESTION_TEXT, WEIGHT, CATEGORY, SCORE_DIRECTION)
VALUES (14, 'PERSONALITY', '직관과 영감을 통해 새로운 아이디어를 잘 떠올립니다.', 1.0, 'S_N', 'N');
INSERT INTO TB_TEST_QUESTIONS (QUESTION_ID, TEST_TYPE, QUESTION_TEXT, WEIGHT, CATEGORY, SCORE_DIRECTION)
VALUES (15, 'PERSONALITY', '추상적인 개념이나 이론적인 논의를 즐기는 편입니다.', 1.0, 'S_N', 'N');
INSERT INTO TB_TEST_QUESTIONS (QUESTION_ID, TEST_TYPE, QUESTION_TEXT, WEIGHT, CATEGORY, SCORE_DIRECTION)
VALUES (16, 'PERSONALITY', '일상적인 대화보다 심오하거나 상상력이 풍부한 대화를 좋아합니다.', 1.0, 'S_N', 'N');


-- T (사고) / F (감정) 척도 문항 (8개)
-- 'T' 지향 문항
INSERT INTO TB_TEST_QUESTIONS (QUESTION_ID, TEST_TYPE, QUESTION_TEXT, WEIGHT, CATEGORY, SCORE_DIRECTION)
VALUES (17, 'PERSONALITY', '결정을 내릴 때 논리와 객관적인 분석을 가장 중요하게 생각합니다.', 1.0, 'T_F', 'T');
INSERT INTO TB_TEST_QUESTIONS (QUESTION_ID, TEST_TYPE, QUESTION_TEXT, WEIGHT, CATEGORY, SCORE_DIRECTION)
VALUES (18, 'PERSONALITY', '비판적이고 분석적인 사고를 통해 문제를 해결하는 것을 선호합니다.', 1.0, 'T_F', 'T');
INSERT INTO TB_TEST_QUESTIONS (QUESTION_ID, TEST_TYPE, QUESTION_TEXT, WEIGHT, CATEGORY, SCORE_DIRECTION)
VALUES (19, 'PERSONALITY', '원칙과 공정성을 중요하게 여기며, 감정적인 요소에 휘둘리지 않습니다.', 1.0, 'T_F', 'T');
INSERT INTO TB_TEST_QUESTIONS (QUESTION_ID, TEST_TYPE, QUESTION_TEXT, WEIGHT, CATEGORY, SCORE_DIRECTION)
VALUES (20, 'PERSONALITY', '타인에게 솔직하고 직설적인 피드백을 주는 편입니다.', 1.0, 'T_F', 'T');

-- 'F' 지향 문항
INSERT INTO TB_TEST_QUESTIONS (QUESTION_ID, TEST_TYPE, QUESTION_TEXT, WEIGHT, CATEGORY, SCORE_DIRECTION)
VALUES (21, 'PERSONALITY', '결정을 내릴 때 사람들의 감정과 상황적인 맥락을 깊이 고려합니다.', 1.0, 'T_F', 'F');
INSERT INTO TB_TEST_QUESTIONS (QUESTION_ID, TEST_TYPE, QUESTION_TEXT, WEIGHT, CATEGORY, SCORE_DIRECTION)
VALUES (22, 'PERSONALITY', '타인의 감정을 공감하고 이해하는 것이 중요하다고 생각합니다.', 1.0, 'T_F', 'F');
INSERT INTO TB_TEST_QUESTIONS (QUESTION_ID, TEST_TYPE, QUESTION_TEXT, WEIGHT, CATEGORY, SCORE_DIRECTION)
VALUES (23, 'PERSONALITY', '조화로운 관계를 유지하고 타인의 기분을 상하게 하지 않으려 노력합니다.', 1.0, 'T_F', 'F');
INSERT INTO TB_TEST_QUESTIONS (QUESTION_ID, TEST_TYPE, QUESTION_TEXT, WEIGHT, CATEGORY, SCORE_DIRECTION)
VALUES (24, 'PERSONALITY', '비판보다는 칭찬과 격려를 통해 타인과 소통하는 것을 선호합니다.', 1.0, 'T_F', 'F');


-- J (판단) / P (인식) 척도 문항 (8개)
-- 'J' 지향 문항
INSERT INTO TB_TEST_QUESTIONS (QUESTION_ID, TEST_TYPE, QUESTION_TEXT, WEIGHT, CATEGORY, SCORE_DIRECTION)
VALUES (25, 'PERSONALITY', '계획을 세우고 그 계획에 따라 체계적으로 움직이는 것을 선호합니다.', 1.0, 'J_P', 'J');
INSERT INTO TB_TEST_QUESTIONS (QUESTION_ID, TEST_TYPE, QUESTION_TEXT, WEIGHT, CATEGORY, SCORE_DIRECTION)
VALUES (26, 'PERSONALITY', '정리정돈이 잘 되어 있고 마감 기한을 철저히 지킵니다.', 1.0, 'J_P', 'J');
INSERT INTO TB_TEST_QUESTIONS (QUESTION_ID, TEST_TYPE, QUESTION_TEXT, WEIGHT, CATEGORY, SCORE_DIRECTION)
VALUES (27, 'PERSONALITY', '결정을 신속하게 내리고 불확실한 상태를 불편해합니다.', 1.0, 'J_P', 'J');
INSERT INTO TB_TEST_QUESTIONS (QUESTION_ID, TEST_TYPE, QUESTION_TEXT, WEIGHT, CATEGORY, SCORE_DIRECTION)
VALUES (28, 'PERSONALITY', '미리 준비하고 예측 가능한 상황을 선호합니다.', 1.0, 'J_P', 'J');

-- 'P' 지향 문항
INSERT INTO TB_TEST_QUESTIONS (QUESTION_ID, TEST_TYPE, QUESTION_TEXT, WEIGHT, CATEGORY, SCORE_DIRECTION)
VALUES (29, 'PERSONALITY', '자유롭고 유연하게 상황에 맞춰 행동하는 것을 즐깁니다.', 1.0, 'J_P', 'P');
INSERT INTO TB_TEST_QUESTIONS (QUESTION_ID, TEST_TYPE, QUESTION_TEXT, WEIGHT, CATEGORY, SCORE_DIRECTION)
VALUES (30, 'PERSONALITY', '계획보다는 즉흥적인 활동이나 새로운 경험을 좋아합니다.', 1.0, 'J_P', 'P');
INSERT INTO TB_TEST_QUESTIONS (QUESTION_ID, TEST_TYPE, QUESTION_TEXT, WEIGHT, CATEGORY, SCORE_DIRECTION)
VALUES (31, 'PERSONALITY', '마감 기한보다는 선택의 여지를 남겨두고 여유롭게 일하는 편입니다.', 1.0, 'J_P', 'P');
INSERT INTO TB_TEST_QUESTIONS (QUESTION_ID, TEST_TYPE, QUESTION_TEXT, WEIGHT, CATEGORY, SCORE_DIRECTION)
VALUES (32, 'PERSONALITY', '새로운 정보에 열려 있으며, 계획을 언제든 변경할 수 있습니다.', 1.0, 'J_P', 'P');
-- TB_TEST_QUESTIONS 테이블에 이미지-텍스트 심리 검사 문항 추가 예시
INSERT INTO TB_TEST_QUESTIONS (QUESTION_ID, TEST_TYPE, QUESTION_TEXT, IMAGE_URL, WEIGHT, CATEGORY, SCORE_DIRECTION) VALUES
    (33, 'PSYCHOLOGICAL', '어둠 속 한 줄기 빛을 향해 달려가는 이 사람을 보며 어떤 감정이나 에너지를 느끼시나요?', 'analysis1.jpg', 1, 'IMAGE_BASED', NULL);
INSERT INTO TB_TEST_QUESTIONS (QUESTION_ID, TEST_TYPE, QUESTION_TEXT, IMAGE_URL, WEIGHT, CATEGORY, SCORE_DIRECTION) VALUES
    (34, 'PSYCHOLOGICAL', '서로 다른 두 공간의 경계를 보며 어떤 단어나 느낌이 떠오르나요? 이 경계가 당신에게 어떤 의미로 다가오나요?', 'analysis2.jpg', 1, 'IMAGE_BASED', NULL);
INSERT INTO TB_TEST_QUESTIONS (QUESTION_ID, TEST_TYPE, QUESTION_TEXT, IMAGE_URL, WEIGHT, CATEGORY, SCORE_DIRECTION) VALUES
    (35, 'PSYCHOLOGICAL', '수많은 책과 고요함으로 가득한 이 공간을 보며 어떤 생각이나 느낌에 잠기게 되나요?', 'analysis3.jpg', 1, 'IMAGE_BASED', NULL);
INSERT INTO TB_TEST_QUESTIONS (QUESTION_ID, TEST_TYPE, QUESTION_TEXT, IMAGE_URL, WEIGHT, CATEGORY, SCORE_DIRECTION) VALUES
    (36, 'PSYCHOLOGICAL', '이 소용돌이치는 푸른 에너지를 보며, 당신의 마음속에 어떤 미지의 감정이나 미스터리가 떠오르나요?', 'analysis4.jpg', 1, 'IMAGE_BASED', NULL);
INSERT INTO TB_TEST_QUESTIONS (QUESTION_ID, TEST_TYPE, QUESTION_TEXT, IMAGE_URL, WEIGHT, CATEGORY, SCORE_DIRECTION) VALUES
    (37, 'PSYCHOLOGICAL', '밤하늘 아래 빛나는 하트를 함께 바라보는 두 사람에게서 어떤 관계의 감정이나 이야기를 느끼시나요?', 'analysis5.jpg', 1, 'IMAGE_BASED', NULL);
INSERT INTO TB_TEST_QUESTIONS (QUESTION_ID, TEST_TYPE, QUESTION_TEXT, IMAGE_URL, WEIGHT, CATEGORY, SCORE_DIRECTION) VALUES
    (38, 'PSYCHOLOGICAL', '어두운 숲 속을 뚫고 들어오는 빛줄기를 보며 어떤 희망이나 안도감을 느끼시나요? 이 빛은 당신에게 어떤 의미인가요?', 'analysis6.jpg', 1, 'IMAGE_BASED', NULL);
INSERT INTO TB_TEST_QUESTIONS (QUESTION_ID, TEST_TYPE, QUESTION_TEXT, IMAGE_URL, WEIGHT, CATEGORY, SCORE_DIRECTION) VALUES
    (39, 'PSYCHOLOGICAL', '자연과 인공적인 구조물이 조화된 이 공간에서 어떤 감정적인 반응이나 생각을 하시나요?', 'analysis7.jpg', 1, 'IMAGE_BASED', NULL);
INSERT INTO TB_TEST_QUESTIONS (QUESTION_ID, TEST_TYPE, QUESTION_TEXT, IMAGE_URL, WEIGHT, CATEGORY, SCORE_DIRECTION) VALUES
    (40, 'PSYCHOLOGICAL', '고요한 해변의 등대를 보며 어떤 감정이나 심리적 안정감을 느끼시나요? 이 등대는 당신에게 무엇을 의미하나요?', 'analysis8.jpg', 1, 'IMAGE_BASED', NULL);
INSERT INTO TB_TEST_QUESTIONS (QUESTION_ID, TEST_TYPE, QUESTION_TEXT, IMAGE_URL, WEIGHT, CATEGORY, SCORE_DIRECTION) VALUES
    (41, 'PSYCHOLOGICAL', '끝없이 이어지는 듯한 나선형 구조를 보며 어떤 심리적 압박감이나 해방감을 느끼시나요?', 'analysis9.jpg', 1, 'IMAGE_BASED', NULL);
INSERT INTO TB_TEST_QUESTIONS (QUESTION_ID, TEST_TYPE, QUESTION_TEXT, IMAGE_URL, WEIGHT, CATEGORY, SCORE_DIRECTION) VALUES
    (42, 'PSYCHOLOGICAL', '산속 외딴집과 길을 걷는 사람의 모습을 보며, 당신의 마음속에 어떤 자유로움이나 외로움이 떠오르나요?', 'analysis10.jpg', 1, 'IMAGE_BASED', NULL);

commit;





-- 13. TB_PERSONALITY_TEST_ANSWERS
CREATE TABLE TB_PERSONALITY_TEST_ANSWERS (
                                             ANSWER_ID NUMBER(19) PRIMARY KEY,
                                             USER_ID VARCHAR2(255) NOT NULL,
                                             QUESTION_ID NUMBER(19) NOT NULL,
                                             ANSWER_VALUE VARCHAR2(50) NOT NULL,
                                             CONSTRAINT FK_PERSONALITY_USER_ID FOREIGN KEY (USER_ID) REFERENCES TB_USERS(USER_ID) ON DELETE CASCADE,
                                             CONSTRAINT FK_PERSONALITY_ANSWER_QUESTION FOREIGN KEY (QUESTION_ID) REFERENCES TB_TEST_QUESTIONS(QUESTION_ID) ON DELETE CASCADE
);

COMMENT ON TABLE TB_PERSONALITY_TEST_ANSWERS IS '성격검사 문항별 답변';
COMMENT ON COLUMN TB_PERSONALITY_TEST_ANSWERS.ANSWER_ID IS '답변 고유 식별자';
COMMENT ON COLUMN TB_PERSONALITY_TEST_ANSWERS.USER_ID IS '사용자 ID';
COMMENT ON COLUMN TB_PERSONALITY_TEST_ANSWERS.QUESTION_ID IS 'TB_TEST_QUESTIONS 테이블의 문항 ID 참조';
COMMENT ON COLUMN TB_PERSONALITY_TEST_ANSWERS.ANSWER_VALUE IS '문항 답변 값 (예: 1~5, YES/NO)';


-- 14. TB_PERSONALITY_ANALYSIS
CREATE TABLE TB_PERSONALITY_ANALYSIS (
                                         PERSONALITY_ID NUMBER(19) PRIMARY KEY,
                                         PERSONALITY_TEST_ID NUMBER(19) NOT NULL,
                                         USER_ID VARCHAR2(255) NOT NULL,
                                         ANALYSIS_TYPE_ID NUMBER(19) NOT NULL,
                                         QUEST_TYPE_ID NUMBER(19),
                                         RESULT VARCHAR2(50) NOT NULL,
                                         DESCRIPTION VARCHAR2(2000),
                                         RECOMMENDED_CHAT_STYLE VARCHAR2(50),
                                         CREATED_AT DATE DEFAULT SYSDATE NOT NULL,
                                         CONSTRAINT FK_PERSONALITY_ANALYSIS_USER FOREIGN KEY (USER_ID) REFERENCES TB_USERS(USER_ID) ON DELETE CASCADE
);

COMMENT ON TABLE TB_PERSONALITY_ANALYSIS IS '성격 분석 결과';
COMMENT ON COLUMN TB_PERSONALITY_ANALYSIS.PERSONALITY_ID IS '성격 분석 고유 식별자';
COMMENT ON COLUMN TB_PERSONALITY_ANALYSIS.USER_ID IS 'TB_USERS 테이블의 사용자 ID 참조';
COMMENT ON COLUMN TB_PERSONALITY_ANALYSIS.RESULT IS '분석 결과 (예: INFP, OCEAN 점수)';
COMMENT ON COLUMN TB_PERSONALITY_ANALYSIS.DESCRIPTION IS '결과에 대한 설명';
COMMENT ON COLUMN TB_PERSONALITY_ANALYSIS.RECOMMENDED_CHAT_STYLE IS '추천 챗봇 스타일 (예: 감성형, 이성형)';
COMMENT ON COLUMN TB_PERSONALITY_ANALYSIS.CREATED_AT IS '분석 생성 시간';

-- 15 수정
CREATE TABLE TB_PSYCHOLOGICAL_TEST_ANSWERS (
                                               ANSWER_ID           NUMBER(19)      PRIMARY KEY,
                                               USER_ID             VARCHAR2(255)   NOT NULL, -- TB_USERS.USER_ID 와 타입 일치
                                               QUESTION_ID         NUMBER(19)      NOT NULL, -- TB_TEST_QUESTIONS.QUESTION_ID 참조
                                               USER_RESPONSE_TEXT  CLOB            NOT NULL, -- <<-- 컬럼명 변경 및 CLOB 타입으로 확장
                                               ANSWER_DATETIME     TIMESTAMP       DEFAULT SYSTIMESTAMP NOT NULL -- <<-- TIMESTAMP 타입으로 변경
);

-- 테이블 및 컬럼 코멘트 추가
COMMENT ON TABLE TB_PSYCHOLOGICAL_TEST_ANSWERS IS '심리 검사 사용자의 답변 (느낀 점 텍스트)';
COMMENT ON COLUMN TB_PSYCHOLOGICAL_TEST_ANSWERS.ANSWER_ID IS '답변 고유 식별자';
COMMENT ON COLUMN TB_PSYCHOLOGICAL_TEST_ANSWERS.USER_ID IS '사용자 ID (TB_USERS 참조)';
COMMENT ON COLUMN TB_PSYCHOLOGICAL_TEST_ANSWERS.QUESTION_ID IS 'TB_TEST_QUESTIONS 테이블의 문항 ID 참조';
COMMENT ON COLUMN TB_PSYCHOLOGICAL_TEST_ANSWERS.USER_RESPONSE_TEXT IS '사용자가 이미지에 대해 작성한 느낀 점 텍스트';
COMMENT ON COLUMN TB_PSYCHOLOGICAL_TEST_ANSWERS.ANSWER_DATETIME IS '답변이 저장된 시각';

-- 16 수정
CREATE TABLE TB_PSYCHOLOGICAL_ANALYSIS (
                                           RESULT_ID               NUMBER(19)      PRIMARY KEY,
                                           USER_ID                 VARCHAR2(255)   NOT NULL, -- TB_USERS.USER_ID 와 타입 일치
                                           QUESTION_ID             NUMBER(19)      NOT NULL, -- TB_TEST_QUESTIONS.QUESTION_ID 참조 (어떤 이미지에 대한 분석인지)
                                           RAW_RESPONSE_TEXT       CLOB            NOT NULL, -- 사용자가 작성한 원본 느낀 점 텍스트 (분석 기록용)
                                           AI_SENTIMENT            VARCHAR2(50),             -- AI 분석 주 감정 (예: '행복', '우울', '불안', '중립')
                                           AI_SENTIMENT_SCORE      NUMBER(5,2),              -- AI 분석 감정 점수 (예: -1.0 ~ 1.0)
                                           AI_CREATIVITY_SCORE     NUMBER(5,2),              -- AI 분석 창의력/상상력 지표 점수 (예: 0 ~ 100)
                                           AI_PERSPECTIVE_KEYWORDS VARCHAR2(500),            -- AI 분석 관점 키워드 (쉼표로 구분)
                                           AI_INSIGHT_SUMMARY      CLOB,                     -- AI가 제공하는 심층 분석 요약 및 통찰
                                           SUGGESTIONS             VARCHAR2(2000),           -- 맞춤형 제안 / 조언
                                           CREATED_AT              TIMESTAMP       DEFAULT SYSTIMESTAMP NOT NULL -- 분석 생성 시간
);

-- 테이블 및 컬럼 코멘트 추가
COMMENT ON TABLE TB_PSYCHOLOGICAL_ANALYSIS IS '이미지-텍스트 심리 검사 분석 결과';
COMMENT ON COLUMN TB_PSYCHOLOGICAL_ANALYSIS.RESULT_ID IS '분석 결과 고유 식별자';
COMMENT ON COLUMN TB_PSYCHOLOGICAL_ANALYSIS.USER_ID IS '분석을 받은 사용자 ID';
COMMENT ON COLUMN TB_PSYCHOLOGICAL_ANALYSIS.QUESTION_ID IS '분석 대상 이미지 문항 ID';
COMMENT ON COLUMN TB_PSYCHOLOGICAL_ANALYSIS.RAW_RESPONSE_TEXT IS '사용자가 이미지에 대해 작성한 원본 텍스트';
COMMENT ON COLUMN TB_PSYCHOLOGICAL_ANALYSIS.AI_SENTIMENT IS 'AI 분석 주 감정 (행복, 우울 등)';
COMMENT ON COLUMN TB_PSYCHOLOGICAL_ANALYSIS.AI_SENTIMENT_SCORE IS 'AI 분석 감정 점수';
COMMENT ON COLUMN TB_PSYCHOLOGICAL_ANALYSIS.AI_CREATIVITY_SCORE IS 'AI 분석 창의력/상상력 지표 점수';
COMMENT ON COLUMN TB_PSYCHOLOGICAL_ANALYSIS.AI_PERSPECTIVE_KEYWORDS IS 'AI 분석 관점 키워드 (쉼표 구분)';
COMMENT ON COLUMN TB_PSYCHOLOGICAL_ANALYSIS.AI_INSIGHT_SUMMARY IS 'AI가 제공하는 심층 분석 요약 및 통찰';
COMMENT ON COLUMN TB_PSYCHOLOGICAL_ANALYSIS.SUGGESTIONS IS '개선 제안 / 맞춤형 조언';
COMMENT ON COLUMN TB_PSYCHOLOGICAL_ANALYSIS.CREATED_AT IS '분석 생성 시간';




-- 17.TB_SIMULATION_SCENARIOS
CREATE TABLE TB_SIMULATION_SCENARIOS (
                                         SCENARIO_ID NUMBER(19) PRIMARY KEY,
                                         SCENARIO_NAME VARCHAR2(100) NOT NULL,
                                         DESCRIPTION VARCHAR2(2000),
                                         IS_ACTIVE NUMBER(1) DEFAULT 1 NOT NULL CHECK (IS_ACTIVE IN (0, 1)),
                                         CREATED_AT DATE DEFAULT SYSDATE NOT NULL,
                                         CONSTRAINT UK_SCENARIO_NAME UNIQUE (SCENARIO_NAME)
);

COMMENT ON TABLE TB_SIMULATION_SCENARIOS IS '시뮬레이션 시나리오';
COMMENT ON COLUMN TB_SIMULATION_SCENARIOS.SCENARIO_ID IS '시나리오의 고유 식별자';
COMMENT ON COLUMN TB_SIMULATION_SCENARIOS.SCENARIO_NAME IS '시나리오 이름 (예: 이직 고민, 대인 관계 갈등)';
COMMENT ON COLUMN TB_SIMULATION_SCENARIOS.DESCRIPTION IS '시나리오에 대한 상세 설명 (예: 시나리오의 목적, 예상 선택지)';
COMMENT ON COLUMN TB_SIMULATION_SCENARIOS.IS_ACTIVE IS '시나리오의 활성화 여부 (0: 비활성, 1: 활성)';
COMMENT ON COLUMN TB_SIMULATION_SCENARIOS.CREATED_AT IS '시나리오 생성 시간, 기본값 SYSDATE';


-- 18. TB_SIMULATION_SETTINGS
CREATE TABLE TB_SIMULATION_SETTINGS (
                                        SETTING_ID NUMBER(19) PRIMARY KEY,
                                        USER_ID VARCHAR2(255) NOT NULL,
                                        SCENARIO_ID NUMBER(19) NOT NULL,
                                        SESSION_ID NUMBER(19),
                                        STATUS VARCHAR2(20) DEFAULT 'IN_PROGRESS' NOT NULL CHECK (STATUS IN ('IN_PROGRESS', 'COMPLETED', 'CANCELLED')),
                                        CREATED_AT DATE DEFAULT SYSDATE NOT NULL,
                                        CONSTRAINT FK_SIMULATION_USER FOREIGN KEY (USER_ID) REFERENCES TB_USERS(USER_ID) ON DELETE CASCADE,
                                        CONSTRAINT FK_SIMULATION_SCENARIO FOREIGN KEY (SCENARIO_ID) REFERENCES TB_SIMULATION_SCENARIOS(SCENARIO_ID) ON DELETE CASCADE,
                                        CONSTRAINT FK_SIMULATION_SESSION FOREIGN KEY (SESSION_ID) REFERENCES TB_COUNSELING_SESSIONS(SESSION_ID) ON DELETE SET NULL
);

COMMENT ON TABLE TB_SIMULATION_SETTINGS IS '시뮬레이션 환경';
COMMENT ON COLUMN TB_SIMULATION_SETTINGS.SETTING_ID IS '시뮬레이션 설정의 고유 식별자';
COMMENT ON COLUMN TB_SIMULATION_SETTINGS.USER_ID IS 'TB_USERS 테이블의 사용자 ID 참조, 시뮬레이션 수행 사용자';
COMMENT ON COLUMN TB_SIMULATION_SETTINGS.SCENARIO_ID IS 'TB_SIMULATION_SCENARIOS 테이블의 시나리오 ID 참조';
COMMENT ON COLUMN TB_SIMULATION_SETTINGS.SESSION_ID IS 'TB_COUNSELING_SESSIONS 테이블의 세션 ID 참조';
COMMENT ON COLUMN TB_SIMULATION_SETTINGS.STATUS IS '시뮬레이션 진행 상태 (IN_PROGRESS, COMPLETED, CANCELLED)';
COMMENT ON COLUMN TB_SIMULATION_SETTINGS.CREATED_AT IS '설정 생성 시간';


-- 19. TB_SIMULATION_QUESTIONS
CREATE TABLE TB_SIMULATION_QUESTIONS (
                                         QUESTION_ID NUMBER(19) PRIMARY KEY,
                                         SCENARIO_ID NUMBER(19) NOT NULL,
                                         QUESTION_NUMBER NUMBER(5) NOT NULL,
                                         QUESTION_TEXT VARCHAR2(2000) NOT NULL,
                                         CHOICE_OPTIONS VARCHAR2(2000) NOT NULL,
                                         CONSTRAINT FK_QUESTION_SCENARIO FOREIGN KEY (SCENARIO_ID) REFERENCES TB_SIMULATION_SCENARIOS(SCENARIO_ID) ON DELETE CASCADE,
                                         CONSTRAINT UK_QUESTION_SCENARIO_NUMBER UNIQUE (SCENARIO_ID, QUESTION_NUMBER)
);

COMMENT ON TABLE TB_SIMULATION_QUESTIONS IS '시뮬레이션 질문';
COMMENT ON COLUMN TB_SIMULATION_QUESTIONS.QUESTION_ID IS '질문의 고유 식별자';
COMMENT ON COLUMN TB_SIMULATION_QUESTIONS.SCENARIO_ID IS 'TB_SIMULATION_SCENARIOS 테이블의 시나리오 ID 참조';
COMMENT ON COLUMN TB_SIMULATION_QUESTIONS.QUESTION_NUMBER IS '시나리오 내 질문 번호';
COMMENT ON COLUMN TB_SIMULATION_QUESTIONS.QUESTION_TEXT IS '질문 내용';
COMMENT ON COLUMN TB_SIMULATION_QUESTIONS.CHOICE_OPTIONS IS '선택지 옵션 (JSON 형식 또는 텍스트)';


-- 20. TB_SIMULATION_CHOICES
CREATE TABLE TB_SIMULATION_CHOICES (
                                       CHOICE_ID NUMBER(19) PRIMARY KEY,
                                       SETTING_ID NUMBER(19) NOT NULL,
                                       QUESTION_NUMBER NUMBER(5) NOT NULL,
                                       CHOICE_TEXT VARCHAR2(255) NOT NULL,
                                       CONSTRAINT FK_CHOICE_SETTING FOREIGN KEY (SETTING_ID) REFERENCES TB_SIMULATION_SETTINGS(SETTING_ID) ON DELETE CASCADE,
                                       CONSTRAINT UK_CHOICE_SETTING_QUESTION UNIQUE (SETTING_ID, QUESTION_NUMBER)
);

COMMENT ON TABLE TB_SIMULATION_CHOICES IS '시뮬레이션 선택지';
COMMENT ON COLUMN TB_SIMULATION_CHOICES.CHOICE_ID IS '선택지의 고유 식별자';
COMMENT ON COLUMN TB_SIMULATION_CHOICES.SETTING_ID IS 'TB_SIMULATION_SETTINGS 테이블의 설정 ID 참조';
COMMENT ON COLUMN TB_SIMULATION_CHOICES.QUESTION_NUMBER IS '질문 번호';
COMMENT ON COLUMN TB_SIMULATION_CHOICES.CHOICE_TEXT IS '선택한 텍스트 (예: "이직을 결정한다")';


-- 21. TB_SIMULATION_RESULTS
CREATE TABLE TB_SIMULATION_RESULTS (
                                       RESULT_ID NUMBER(19) PRIMARY KEY,
                                       SETTING_ID NUMBER(19) NOT NULL,
                                       RESULT_SUMMARY VARCHAR2(2000) NOT NULL,
                                       PERSONALITY_TYPE VARCHAR2(50) CHECK (PERSONALITY_TYPE IN (
        'INFP', 'ENFJ', 'INTJ', 'ENTP', 'INFJ', 'ENFP',
        'ISTJ', 'ESTJ', 'ISFJ', 'ESFJ', 'ISTP', 'ESTP',
        'INTP', 'ENTJ', 'ISFP', 'ESFP', NULL
    )),
                                       CREATED_AT DATE DEFAULT SYSDATE NOT NULL,
                                       CONSTRAINT FK_RESULT_SETTING FOREIGN KEY (SETTING_ID) REFERENCES TB_SIMULATION_SETTINGS(SETTING_ID) ON DELETE CASCADE
);

COMMENT ON TABLE TB_SIMULATION_RESULTS IS '시뮬레이션 분석 결과';
COMMENT ON COLUMN TB_SIMULATION_RESULTS.RESULT_ID IS '시뮬레이션 결과의 고유 식별자';
COMMENT ON COLUMN TB_SIMULATION_RESULTS.SETTING_ID IS 'TB_SIMULATION_SETTINGS 테이블의 설정 ID 참조';
COMMENT ON COLUMN TB_SIMULATION_RESULTS.RESULT_SUMMARY IS 'AI가 생성한 성격 분석 요약';
COMMENT ON COLUMN TB_SIMULATION_RESULTS.PERSONALITY_TYPE IS '성격 유형';
COMMENT ON COLUMN TB_SIMULATION_RESULTS.CREATED_AT IS '결과 생성 시간';


-- 22. TB_NOTICES
CREATE TABLE TB_NOTICES (
                            NOTICE_NO NUMBER(19) PRIMARY KEY,
                            TITLE VARCHAR2(100) NOT NULL,
                            USER_ID VARCHAR2(255) NOT NULL,
                            CONTENT VARCHAR2(2000) NOT NULL,
                            READCOUNT NUMBER(19) DEFAULT 0,
                            ORIGINAL_FILEPATH VARCHAR2(2000),
                            RENAME_FILEPATH VARCHAR2(2000),
                            IMPORTANCE CHAR(1) DEFAULT 'N' NOT NULL,
                            IMP_END_DATE DATE DEFAULT SYSDATE NOT NULL,
                            NOTICE_DATE DATE DEFAULT SYSDATE NOT NULL,
                            CONSTRAINT FK_NOTICE_USER_ID FOREIGN KEY (USER_ID) REFERENCES TB_USERS (USER_ID) ON DELETE CASCADE
);

COMMENT ON TABLE TB_NOTICES IS '공지사항 관리';
COMMENT ON COLUMN TB_NOTICES.NOTICE_NO IS '공지사항 고유 식별자';
COMMENT ON COLUMN TB_NOTICES.TITLE IS '공지 제목';
COMMENT ON COLUMN TB_NOTICES.USER_ID IS '작성자';
COMMENT ON COLUMN TB_NOTICES.CONTENT IS '공지 내용';
COMMENT ON COLUMN TB_NOTICES.READCOUNT IS '조회수';
COMMENT ON COLUMN TB_NOTICES.ORIGINAL_FILEPATH IS '원본첨부파일';
COMMENT ON COLUMN TB_NOTICES.RENAME_FILEPATH IS '바뀐첨부파일';
COMMENT ON COLUMN TB_NOTICES.IMPORTANCE IS '중요도';
COMMENT ON COLUMN TB_NOTICES.IMP_END_DATE IS '중요도게시종료날짜';
COMMENT ON COLUMN TB_NOTICES.NOTICE_DATE IS '작성 시간';



--(250714 신선혜 : CATEGORY,LAST_ACTIVITY_AT COLUMN 추가, ORIGINAL_FILEPATH,  RENAME_FILEPATH 삭제  )
-- 23. TB_INQUIRIES
CREATE TABLE TB_INQUIRIES (
                              INQUIRY_ID NUMBER(19) PRIMARY KEY,
                              USER_ID VARCHAR2(255) NOT NULL,
                              TITLE VARCHAR2(100) NOT NULL,
                              CATEGORY VARCHAR2(100) NOT NULL,
                              CONTENT VARCHAR2(2000) NOT NULL,
    --ORIGINAL_FILEPATH VARCHAR2(2000),
    --RENAME_FILEPATH VARCHAR2(2000),
                              STATUS VARCHAR2(20) DEFAULT 'PENDING' NOT NULL,
                              CREATED_AT DATE DEFAULT SYSDATE NOT NULL,
                              LAST_ACTIVITY_AT DATE DEFAULT SYSDATE,

                              CONSTRAINT FK_INQUIRY_USER FOREIGN KEY (USER_ID) REFERENCES TB_USERS(USER_ID) ON DELETE CASCADE,
                              CONSTRAINT CHK_INQUIRY_STATUS CHECK (STATUS IN ('PENDING', 'ANSWERED', 'CLOSED'))
);

COMMENT ON TABLE TB_INQUIRIES IS '사용자 문의사항 관리';
COMMENT ON COLUMN TB_INQUIRIES.INQUIRY_ID IS '문의 고유 식별자';
COMMENT ON COLUMN TB_INQUIRIES.USER_ID IS 'TB_USERS 테이블의 사용자 ID 참조';
COMMENT ON COLUMN TB_INQUIRIES.TITLE IS '문의 제목';
COMMENT ON COLUMN TB_INQUIRIES.CATEGORY IS '문의 카테고리';
COMMENT ON COLUMN TB_INQUIRIES.CONTENT IS '문의 내용';
--COMMENT ON COLUMN TB_INQUIRIES.ORIGINAL_FILEPATH IS '원본첨부파일';
--COMMENT ON COLUMN TB_INQUIRIES.RENAME_FILEPATH IS '바뀐첨부파일';
COMMENT ON COLUMN TB_INQUIRIES.STATUS IS '문의 상태 (PENDING: 답변대기, ANSWERED: 답변완료, CLOSED: 종료)';
COMMENT ON COLUMN TB_INQUIRIES.CREATED_AT IS '문의 생성 시간';
COMMENT ON COLUMN TB_INQUIRIES.LAST_ACTIVITY_AT IS '추가문의 생성 시간';



--(250711 신선혜 : TITLE, READ_COUNT COLUMN 삭제)
-- 24. TB_COMMENTS
CREATE TABLE TB_COMMENTS (
                             COMMENT_ID NUMBER(19) PRIMARY KEY,  -- 댓글 고유 식별자
                             INQUIRY_ID NUMBER(19),              -- 문의사항 참조 (원글)
                             PARENT_COMMENT_ID NUMBER(19),       -- 부모 댓글 (대댓글용)
                             COMMENT_LEVEL NUMBER DEFAULT 1,     -- 댓글 단계: 1(댓글), 2(대댓글)
                             COMMENT_SEQ NUMBER DEFAULT 1,       -- 댓글 순서
                             USER_ID VARCHAR2(255),               -- 작성자
    --TITLE VARCHAR2(50),                 -- 제목
                             CONTENT VARCHAR2(2000) NOT NULL,    -- 내용
    -- READ_COUNT NUMBER DEFAULT 0,        -- 조회수
                             CREATED_AT DATE DEFAULT SYSDATE,    -- 작성 시간
                             CONSTRAINT FK_COMMENT_USER_ID FOREIGN KEY (USER_ID) REFERENCES TB_USERS (USER_ID) ON DELETE CASCADE,
                             CONSTRAINT FK_COMMENT_INQUIRY FOREIGN KEY (INQUIRY_ID) REFERENCES TB_INQUIRIES (INQUIRY_ID) ON DELETE CASCADE,
                             CONSTRAINT FK_COMMENT_PARENT FOREIGN KEY (PARENT_COMMENT_ID) REFERENCES TB_COMMENTS (COMMENT_ID) ON DELETE CASCADE
);


COMMENT ON TABLE TB_COMMENTS IS '문의사항 댓글 및 대댓글 관리';
COMMENT ON COLUMN TB_COMMENTS.COMMENT_ID IS '댓글 고유 식별자';
COMMENT ON COLUMN TB_COMMENTS.INQUIRY_ID IS '문의사항 참조 ID';
COMMENT ON COLUMN TB_COMMENTS.PARENT_COMMENT_ID IS '부모 댓글 참조 ID (대댓글의 경우)';
COMMENT ON COLUMN TB_COMMENTS.COMMENT_LEVEL IS '댓글 단계 (1: 댓글, 2: 대댓글)';
COMMENT ON COLUMN TB_COMMENTS.COMMENT_SEQ IS '댓글 정렬 순서';
COMMENT ON COLUMN TB_COMMENTS.USER_ID IS '댓글 작성자 ID';
--COMMENT ON COLUMN TB_COMMENTS.TITLE IS '댓글 제목';
COMMENT ON COLUMN TB_COMMENTS.CONTENT IS '댓글 내용';
--COMMENT ON COLUMN TB_COMMENTS.READ_COUNT IS '댓글 조회수';
COMMENT ON COLUMN TB_COMMENTS.CREATED_AT IS '댓글 생성 시간';



-- 25. TB_SYSTEM_LOGS
CREATE TABLE TB_SYSTEM_LOGS (
                                LOG_ID NUMBER(19) PRIMARY KEY,
                                USER_ID VARCHAR2(255),
                                ACTION VARCHAR2(100) NOT NULL,
                                SEVERITY VARCHAR2(50) NOT NULL,
                                BEFORE_DATA VARCHAR2(2000),
                                AFTER_DATA VARCHAR2(2000),
                                CREATED_AT DATE DEFAULT SYSDATE NOT NULL,

                                CONSTRAINT FK_SYSTEMLOG_USER FOREIGN KEY (USER_ID) REFERENCES TB_USERS(USER_ID) ON DELETE CASCADE,
                                CONSTRAINT CHK_SYSTEMLOG_SEVERITY CHECK (SEVERITY IN ('INFO', 'WARN', 'ERROR', 'CRITICAL'))
);

COMMENT ON TABLE TB_SYSTEM_LOGS IS '시스템 변경 로그';
COMMENT ON COLUMN TB_SYSTEM_LOGS.LOG_ID IS '로그 고유 식별자';
COMMENT ON COLUMN TB_SYSTEM_LOGS.USER_ID IS 'TB_USERS 테이블의 사용자 ID 참조';
COMMENT ON COLUMN TB_SYSTEM_LOGS.ACTION IS '변경 항목 (예: 사용자 정보 수정)';
COMMENT ON COLUMN TB_SYSTEM_LOGS.SEVERITY IS '로그의 심각도 (예: INFO, WARN, ERROR, CRITICAL)';
COMMENT ON COLUMN TB_SYSTEM_LOGS.BEFORE_DATA IS '변경 전 데이터';
COMMENT ON COLUMN TB_SYSTEM_LOGS.AFTER_DATA IS '변경 후 데이터';
COMMENT ON COLUMN TB_SYSTEM_LOGS.CREATED_AT IS '로그 생성 시간';


-- 26. TB_USER_ANALYSIS_SUMMARY
CREATE TABLE TB_USER_ANALYSIS_SUMMARY (
                                          USER_SUMMARY_ID NUMBER(19) CONSTRAINT PK_USER_SUMMARY_ID PRIMARY KEY,
                                          USER_ID VARCHAR2(255),
                                          LAST_UPDATED DATE DEFAULT SYSDATE,
                                          PSYCHO_ID NUMBER(19),
                                          PERSONALITY_ID NUMBER(19),
                                          EMOTION_LOG_ID NUMBER(19),
                                          SUMMARY_ID NUMBER(19),
                                          RESULT_ID NUMBER(19),
                                          ANALYSIS_COMMENT VARCHAR2(2000),

                                          CONSTRAINT FK_ANALYSIS_USER FOREIGN KEY (USER_ID) REFERENCES TB_USERS(USER_ID) ON DELETE CASCADE,
                                          CONSTRAINT FK_ANALYSIS_PSYCHO FOREIGN KEY (PSYCHO_ID) REFERENCES TB_PSYCHOLOGICAL_ANALYSIS(RESULT_ID) ON DELETE CASCADE,
                                          CONSTRAINT FK_ANALYSIS_PERSONALITY FOREIGN KEY (PERSONALITY_ID) REFERENCES TB_PERSONALITY_ANALYSIS(PERSONALITY_ID) ON DELETE CASCADE,
                                          CONSTRAINT FK_ANALYSIS_EMOTION FOREIGN KEY (EMOTION_LOG_ID) REFERENCES TB_EMOTION_LOGS(EMOTION_LOG_ID) ON DELETE CASCADE,
                                          CONSTRAINT FK_ANALYSIS_SUMMARY FOREIGN KEY (SUMMARY_ID) REFERENCES TB_COUNSELING_ANALYSIS_SUMMARIES(SUMMARY_ID) ON DELETE CASCADE,
                                          CONSTRAINT FK_ANALYSIS_RESULT FOREIGN KEY (RESULT_ID) REFERENCES TB_SIMULATION_RESULTS(RESULT_ID) ON DELETE CASCADE
);

COMMENT ON TABLE TB_USER_ANALYSIS_SUMMARY IS '사용자별 종합 분석 요약';
COMMENT ON COLUMN TB_USER_ANALYSIS_SUMMARY.USER_SUMMARY_ID IS '종합 분석 요약의 고유 식별자, 각 분석 요약을 고유하게 구분';
COMMENT ON COLUMN TB_USER_ANALYSIS_SUMMARY.USER_ID IS 'TB_USERS 테이블의 사용자 ID 참조';
COMMENT ON COLUMN TB_USER_ANALYSIS_SUMMARY.LAST_UPDATED IS '최종 업데이트 시간';
COMMENT ON COLUMN TB_USER_ANALYSIS_SUMMARY.PSYCHO_ID IS 'TB_PSYCHOLOGICAL_ANALYSIS 테이블 참조';
COMMENT ON COLUMN TB_USER_ANALYSIS_SUMMARY.PERSONALITY_ID IS 'TB_PERSONALITY_ANALYSIS 테이블 참조';
COMMENT ON COLUMN TB_USER_ANALYSIS_SUMMARY.EMOTION_LOG_ID IS 'TB_EMOTION_LOGS 테이블 참조';
COMMENT ON COLUMN TB_USER_ANALYSIS_SUMMARY.SUMMARY_ID IS 'TB_COUNSELING_ANALYSIS_SUMMARIES 테이블 참조';
COMMENT ON COLUMN TB_USER_ANALYSIS_SUMMARY.RESULT_ID IS 'TB_SIMULATION_RESULTS 테이블 참조';
COMMENT ON COLUMN TB_USER_ANALYSIS_SUMMARY.ANALYSIS_COMMENT IS 'AI 종합 분석 코멘트';


-- 27. TB_QUEST_REWARDS
CREATE TABLE TB_QUEST_REWARDS (
                                  REWARD_ID NUMBER(19) PRIMARY KEY,
                                  QUEST_NAME VARCHAR2(100) NOT NULL,           -- 퀘스트/업적 이름
                                  REQUIRED_POINTS NUMBER(10) NOT NULL,         -- 구매/획득 필요 포인트
                                  REWARD_RARITY VARCHAR2(20) NOT NULL,         -- 레어리티(레어/에픽/유니크/레전더리/플래티넘)
                                  TITLE_REWARD VARCHAR2(50),                   -- 뱃지/칭호명
                                  DESCRIPTION VARCHAR2(1000),                  -- 설명
                                  IMAGE_PATH VARCHAR2(255)                     -- 뱃지 이미지 경로
);

COMMENT ON TABLE TB_QUEST_REWARDS IS '퀘스트/뱃지 보상 마스터';
COMMENT ON COLUMN TB_QUEST_REWARDS.REWARD_RARITY IS '보상 등급(레어, 에픽, 유니크, 레전더리, 플래티넘)';
COMMENT ON COLUMN TB_QUEST_REWARDS.IMAGE_PATH IS '뱃지 이미지 경로';

-- 샘플 데이터
INSERT INTO TB_QUEST_REWARDS VALUES (1, '첫 마음 다짐', 100, '레어', '정신력 수련생', '마음의 기초를 다지는 첫걸음', '/images/badge/badge_1.png');
INSERT INTO TB_QUEST_REWARDS VALUES (2, '감정 일기', 200, '레어', '감정의 기록자', '자신의 감정을 기록하는 따뜻한 마음', '/images/badge/badge_2.png');
INSERT INTO TB_QUEST_REWARDS VALUES (3, '자기 이해', 300, '에픽', '내면의 탐구자', '자신의 내면을 깊이 탐구한 자에게', '/images/badge/badge_3.png');
INSERT INTO TB_QUEST_REWARDS VALUES (4, '스트레스 관리', 400, '에픽', '평온의 수호자', '마음의 평온을 지키는 강인한 영혼', '/images/badge/badge_4.png');
INSERT INTO TB_QUEST_REWARDS VALUES (5, '깊은 대화', 600, '유니크', '마음의 대화술사', '진정한 대화로 마음을 나누는 자에게', '/images/badge/badge_5.png');
INSERT INTO TB_QUEST_REWARDS VALUES (6, '긍정의 습관', 700, '유니크', '희망의 전파자', '긍정의 에너지를 퍼뜨리는 빛나는 존재', '/images/badge/badge_6.png');
INSERT INTO TB_QUEST_REWARDS VALUES (7, '자아 성장', 800, '레전더리', '성장의 마스터', '끊임없는 성장으로 빛나는 별과 같은 당신', '/images/badge/badge_7.png');
INSERT INTO TB_QUEST_REWARDS VALUES (8, '마음의 여정', 1000, '레전더리', '영혼의 길잡이', '마음의 여정을 이끄는 위대한 길잡이', '/images/badge/badge_8.png');
INSERT INTO TB_QUEST_REWARDS VALUES (9, '심리학 마스터', 1200, '플래티넘', '심리학의 현자', '심리학의 깊은 지식을 가진 현명한 자', '/images/badge/badge_9.png');
INSERT INTO TB_QUEST_REWARDS VALUES (10, '치유의 달인', 1500, '플래티넘', '치유의 대가', '마음의 상처를 치유하는 대가', '/images/badge/badge_10.png');

-- 28. TB_USER_POINTS
CREATE TABLE TB_USER_POINTS (
                                USER_ID VARCHAR2(255) PRIMARY KEY,
                                POINTS NUMBER(10) DEFAULT 0 NOT NULL -- 현재 포인트
);

COMMENT ON TABLE TB_USER_POINTS IS '사용자 포인트 관리';
COMMENT ON COLUMN TB_USER_POINTS.USER_ID IS '사용자 ID';
COMMENT ON COLUMN TB_USER_POINTS.POINTS IS '사용자 보유 포인트';

-- 샘플 데이터
INSERT INTO TB_USER_POINTS VALUES ('user001', 2450);
INSERT INTO TB_USER_POINTS VALUES ('user002', 120);

-- 29. TB_USER_REWARDS
CREATE TABLE TB_USER_REWARDS (
                                 USER_REWARD_ID NUMBER(19) PRIMARY KEY, -- 사용자 보상 고유 ID (시퀀스 등으로 관리)
                                 USER_ID VARCHAR2(255) NOT NULL,        -- 사용자 ID (TB_USERS.USER_ID)
                                 REWARD_ID NUMBER(19) NOT NULL,         -- 보상(뱃지/칭호) ID (TB_QUEST_REWARDS.REWARD_ID)
                                 ACQUIRED_AT DATE DEFAULT SYSDATE,      -- 획득(구매) 일시
                                 IS_APPLIED NUMBER(1) DEFAULT 0 CHECK (IS_APPLIED IN (0, 1)), -- 적용 여부 (0: 미적용, 1: 적용)
                                 CONSTRAINT FK_USER_REWARD_USER FOREIGN KEY (USER_ID) REFERENCES TB_USERS(USER_ID) ON DELETE CASCADE,
                                 CONSTRAINT FK_USER_REWARD_REWARD FOREIGN KEY (REWARD_ID) REFERENCES TB_QUEST_REWARDS(REWARD_ID) ON DELETE CASCADE,
                                 CONSTRAINT UK_USER_REWARD UNIQUE (USER_ID, REWARD_ID) -- 한 사용자는 같은 보상을 한 번만 획득
);

COMMENT ON TABLE TB_USER_REWARDS IS '사용자 뱃지/칭호 획득 내역';
COMMENT ON COLUMN TB_USER_REWARDS.USER_REWARD_ID IS '사용자 보상 고유 ID';
COMMENT ON COLUMN TB_USER_REWARDS.USER_ID IS '사용자 ID (TB_USERS.USER_ID)';
COMMENT ON COLUMN TB_USER_REWARDS.REWARD_ID IS '보상(뱃지/칭호) ID (TB_QUEST_REWARDS.REWARD_ID)';
COMMENT ON COLUMN TB_USER_REWARDS.ACQUIRED_AT IS '획득(구매) 일시';
COMMENT ON COLUMN TB_USER_REWARDS.IS_APPLIED IS '보상 적용 여부 (0: 미적용, 1: 적용)';


-- USER_REWARD_ID는 시퀀스(예: SEQ_USER_REWARD_ID.NEXTVAL)로 관리하는 것이 일반적입니다.
-- 예시:
-- INSERT INTO TB_USER_REWARDS (USER_REWARD_ID, USER_ID, REWARD_ID, ACQUIRED_AT, IS_APPLIED)
-- VALUES (SEQ_USER_REWARD_ID.NEXTVAL, 'user1', 1, SYSDATE, 1);

-- 30. TB_FEEDBACK_RECOMMENDATIONS
CREATE TABLE TB_FEEDBACK_RECOMMENDATIONS (
                                             FEEDBACK_ID NUMBER(19) PRIMARY KEY,         -- 피드백 고유 ID (시퀀스 등으로 관리)
                                             USER_ID VARCHAR2(255) NOT NULL,             -- 사용자 ID (TB_USERS.USER_ID)
                                             USER_SUMMARY_ID NUMBER(19),                 -- 분석 요약 ID (TB_USER_ANALYSIS_SUMMARY.USER_SUMMARY_ID)
                                             GUIDANCE_TYPE_ID NUMBER(19) NOT NULL,       -- 가이드 유형 ID (TB_GUIDANCE_TYPES.GUIDANCE_TYPE_ID)
                                             REWARD_ID NUMBER(19),                       -- 추천 퀘스트 보상 ID (TB_QUEST_REWARDS.REWARD_ID)
                                             CONTENT VARCHAR2(2000) NOT NULL,            -- 추천 내용(메시지)
                                             PROGRESS NUMBER(5,2) DEFAULT 0 CHECK (PROGRESS BETWEEN 0 AND 100), -- 진행률(0~100)
                                             IS_COMPLETED NUMBER(1) DEFAULT 0 NOT NULL CHECK (IS_COMPLETED IN (0, 1)), -- 완료 여부 (0: 미완료, 1: 완료)
                                             CREATED_AT DATE DEFAULT SYSDATE NOT NULL,   -- 생성 일시
                                             CONSTRAINT FK_FEEDBACK_USER FOREIGN KEY (USER_ID) REFERENCES TB_USERS(USER_ID) ON DELETE CASCADE,
                                             CONSTRAINT FK_FEEDBACK_USER_SUMMARY FOREIGN KEY (USER_SUMMARY_ID) REFERENCES TB_USER_ANALYSIS_SUMMARY(USER_SUMMARY_ID) ON DELETE CASCADE,
                                             CONSTRAINT FK_FEEDBACK_GUIDANCE_TYPE FOREIGN KEY (GUIDANCE_TYPE_ID) REFERENCES TB_GUIDANCE_TYPES(GUIDANCE_TYPE_ID) ON DELETE CASCADE,
                                             CONSTRAINT FK_FEEDBACK_QUEST FOREIGN KEY (REWARD_ID) REFERENCES TB_QUEST_REWARDS(REWARD_ID) ON DELETE CASCADE
);

COMMENT ON TABLE TB_FEEDBACK_RECOMMENDATIONS IS 'AI 추천 퀘스트';
COMMENT ON COLUMN TB_FEEDBACK_RECOMMENDATIONS.FEEDBACK_ID IS '피드백 고유 ID';
COMMENT ON COLUMN TB_FEEDBACK_RECOMMENDATIONS.USER_ID IS '사용자 ID (TB_USERS.USER_ID)';
COMMENT ON COLUMN TB_FEEDBACK_RECOMMENDATIONS.USER_SUMMARY_ID IS '분석 요약 ID (TB_USER_ANALYSIS_SUMMARY.USER_SUMMARY_ID)';
COMMENT ON COLUMN TB_FEEDBACK_RECOMMENDATIONS.GUIDANCE_TYPE_ID IS '가이드 유형 ID (TB_GUIDANCE_TYPES.GUIDANCE_TYPE_ID)';
COMMENT ON COLUMN TB_FEEDBACK_RECOMMENDATIONS.REWARD_ID IS '추천 퀘스트 보상 ID (TB_QUEST_REWARDS.REWARD_ID)';
COMMENT ON COLUMN TB_FEEDBACK_RECOMMENDATIONS.CONTENT IS '추천 내용(메시지)';
COMMENT ON COLUMN TB_FEEDBACK_RECOMMENDATIONS.PROGRESS IS '진행률(0~100)';
COMMENT ON COLUMN TB_FEEDBACK_RECOMMENDATIONS.IS_COMPLETED IS '완료 여부 (0: 미완료, 1: 완료)';
COMMENT ON COLUMN TB_FEEDBACK_RECOMMENDATIONS.CREATED_AT IS '생성 일시';

-- 31. TB_CONTENTS
CREATE TABLE TB_CONTENTS (
                             CONTENT_ID NUMBER(19) PRIMARY KEY,         -- 콘텐츠 고유 ID (시퀀스 등으로 관리)
                             USER_ID VARCHAR2(255),                     -- 사용자 ID (TB_USERS.USER_ID, 맞춤형 추천일 경우)
                             GUIDANCE_TYPE_ID NUMBER(19),               -- 가이드 유형 ID (TB_GUIDANCE_TYPES.GUIDANCE_TYPE_ID)
                             USER_SUMMARY_ID NUMBER(19),                -- 사용자 분석 요약 ID (TB_USER_ANALYSIS_SUMMARY.USER_SUMMARY_ID)
                             TITLE VARCHAR2(100) NOT NULL,              -- 콘텐츠 제목
                             URL VARCHAR2(255) NOT NULL,                -- 콘텐츠 URL (YouTube 등)
                             SOURCE VARCHAR2(100),                      -- 콘텐츠 출처(YouTube, Pixabay 등)
                             CONSTRAINT FK_CONTENT_USER FOREIGN KEY (USER_ID) REFERENCES TB_USERS(USER_ID) ON DELETE SET NULL,
                             CONSTRAINT FK_CONTENT_GUIDANCE_TYPE FOREIGN KEY (GUIDANCE_TYPE_ID) REFERENCES TB_GUIDANCE_TYPES(GUIDANCE_TYPE_ID) ON DELETE SET NULL,
                             CONSTRAINT FK_CONTENT_USER_SUMMARY FOREIGN KEY (USER_SUMMARY_ID) REFERENCES TB_USER_ANALYSIS_SUMMARY(USER_SUMMARY_ID) ON DELETE SET NULL
);

COMMENT ON TABLE TB_CONTENTS IS 'AI 추천 콘텐츠';
COMMENT ON COLUMN TB_CONTENTS.CONTENT_ID IS '콘텐츠 고유 ID';
COMMENT ON COLUMN TB_CONTENTS.USER_ID IS '사용자 ID (TB_USERS.USER_ID, 맞춤형 추천일 경우)';
COMMENT ON COLUMN TB_CONTENTS.GUIDANCE_TYPE_ID IS '가이드 유형 ID (TB_GUIDANCE_TYPES.GUIDANCE_TYPE_ID)';
COMMENT ON COLUMN TB_CONTENTS.USER_SUMMARY_ID IS '사용자 분석 요약 ID (TB_USER_ANALYSIS_SUMMARY.USER_SUMMARY_ID)';
COMMENT ON COLUMN TB_CONTENTS.TITLE IS '콘텐츠 제목';
COMMENT ON COLUMN TB_CONTENTS.URL IS '콘텐츠 URL (YouTube 등)';
COMMENT ON COLUMN TB_CONTENTS.SOURCE IS '콘텐츠 출처(YouTube, Pixabay 등)';



-- 트리거

-- 1. 생성/수정 시간 자동처리
-- 1. TRG_COMMENT_TIME
CREATE OR REPLACE TRIGGER TRG_COMMENT_TIME
BEFORE INSERT OR UPDATE ON TB_COMMENTS
                                                                                            FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.CREATED_AT := SYSDATE;
  ELSIF UPDATING THEN
    :NEW.CREATED_AT := NVL(:OLD.CREATED_AT, SYSDATE);
END IF;
END;
/

-- 2. TRG_NOTICE_TIME (변경 없음)
CREATE OR REPLACE TRIGGER TRG_NOTICE_TIME
BEFORE INSERT OR UPDATE ON TB_NOTICES
                            FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.NOTICE_DATE := SYSDATE;
--    :NEW.UPDATED_AT := NULL;
  ELSIF UPDATING THEN
    :NEW.NOTICE_DATE := NVL(:OLD.NOTICE_DATE, SYSDATE);
--    :NEW.UPDATED_AT := SYSDATE;
END IF;
END;
/

-- 3. TRG_INQUIRIES_TIME (변경 없음)
CREATE OR REPLACE TRIGGER TRG_INQUIRIES_TIME
BEFORE INSERT OR UPDATE ON TB_INQUIRIES
                            FOR EACH ROW
BEGIN
  IF INSERTING THEN
    :NEW.CREATED_AT := SYSDATE;
  ELSIF UPDATING THEN
    :NEW.CREATED_AT := NVL(:OLD.CREATED_AT, SYSDATE);
END IF;
END;
/

-- 4. TRG_USER_UPDATE_AUDIT
--CREATE OR REPLACE TRIGGER TRG_USER_UPDATE_AUDIT
--AFTER UPDATE ON TB_USERS
--FOR EACH ROW
--BEGIN
--  IF (:OLD.USER_PWD != :NEW.USER_PWD OR
--      (:OLD.USER_PWD IS NULL AND :NEW.USER_PWD IS NOT NULL) OR
--      (:OLD.USER_PWD IS NOT NULL AND :NEW.USER_PWD IS NULL) OR
--      :OLD.STATUS != :NEW.STATUS OR
--      (:OLD.STATUS IS NULL AND :NEW.STATUS IS NOT NULL) OR
--      (:OLD.STATUS IS NOT NULL AND :NEW.STATUS IS NULL)) THEN
--    INSERT INTO TB_SYSTEM_LOGS (
--      LOG_ID,
--      USER_ID,
--      ACTION,
--      BEFORE_DATA,
--      AFTER_DATA,
--      CREATED_AT
--    ) VALUES (
--      SEQ_SYSTEM_LOGS_LOG_ID.NEXTVAL,
--      :NEW.USER_ID,
--      'USER UPDATE',
--      'PWD: ' || NVL(:OLD.USER_PWD, 'NULL') || ', STATUS: ' || NVL(:OLD.STATUS, 'NULL'),
--      'PWD: ' || NVL(:NEW.USER_PWD, 'NULL') || ', STATUS: ' || NVL(:NEW.STATUS, 'NULL'),
--      SYSDATE
--    );
--  END IF;
--END;
--/

---- 5. TRG_FEEDBACK_COMPLETION_REWARD
--CREATE OR REPLACE TRIGGER TRG_FEEDBACK_COMPLETION_REWARD
--AFTER UPDATE ON TB_FEEDBACK_RECOMMENDATIONS
--                 FOR EACH ROW
--                 WHEN (NEW.IS_COMPLETED = 1 AND OLD.IS_COMPLETED = 0)
--DECLARE
--v_points_reward NUMBER := 0;
--  v_reward_type VARCHAR2(20);
--  v_user_exists NUMBER;
--  v_current_points NUMBER;
--  v_current_level NUMBER;
--  v_threshold NUMBER;
--BEGIN
--  -- REWARD_ID가 NULL이면 처리 중단
--  IF :NEW.REWARD_ID IS NULL THEN
--    RETURN;
--END IF;
--
----  -- TB_QUEST_REWARDS에서 보상 정보 조회
----BEGIN
----SELECT NVL(POINTS_REWARD, 0), REWARD_TYPE
----INTO v_points_reward, v_reward_type
----FROM TB_QUEST_REWARDS
----WHERE REWARD_ID = :NEW.REWARD_ID;
----EXCEPTION
----    WHEN NO_DATA_FOUND THEN
----      RETURN;
----END;
--
----  -- TB_USER_POINTS 레코드 존재 여부 확인
----SELECT COUNT(*)
----INTO v_user_exists
----FROM TB_USER_POINTS
----WHERE USER_ID = :NEW.USER_ID;
----
------ 동시성 제어를 위해 TB_USER_POINTS 잠금
----IF v_user_exists = 0 THEN
----    INSERT INTO TB_USER_POINTS (USER_ID, POINTS)
----    VALUES (:NEW.USER_ID, v_points_reward, 1, 100);
----ELSE
----UPDATE TB_USER_POINTS
----SET POINTS = POINTS + v_points_reward
----WHERE USER_ID = :NEW.USER_ID;
--
------ 레벨 승급 로직
----SELECT POINTS, USER_LEVEL, LEVEL_POINTS_THRESHOLD
----INTO v_current_points, v_current_level, v_threshold
----FROM TB_USER_POINTS
----WHERE USER_ID = :NEW.USER_ID FOR UPDATE;
----
----IF v_current_points >= v_threshold THEN
----UPDATE TB_USER_POINTS
----SET USER_LEVEL = USER_LEVEL + 1,
----    LEVEL_POINTS_THRESHOLD = LEVEL_POINTS_THRESHOLD * 1.5
----WHERE USER_ID = :NEW.USER_ID;
----END IF;
----END IF;
--
----  -- TB_USER_REWARDS에 보상 기록
----INSERT INTO TB_USER_REWARDS (USER_REWARD_ID, USER_ID, REWARD_ID, IS_APPLIED)
----VALUES (SEQ_USER_REWARDS_USER_REWARD_ID.NEXTVAL, :NEW.USER_ID, :NEW.REWARD_ID,
----        CASE WHEN v_reward_type = 'TITLE' THEN 1 ELSE 0 END);
----EXCEPTION
----  WHEN DUP_VAL_ON_INDEX THEN
----    NULL; -- UK_USER_REWARD 제약 위반 무시
----WHEN OTHERS THEN
----    RAISE_APPLICATION_ERROR(-20001, 'Error in reward processing: ' || SQLERRM);
----END;



-- 6. 결과 입력 시 사용자 요약 정보 업데이트
-- CREATE OR REPLACE TRIGGER TRG_SIMULATION_RESULT_SUMMARY
-- AFTER INSERT ON TB_SIMULATION_RESULT
-- FOR EACH ROW
-- BEGIN
--   UPDATE TB_USER_ANALYSIS_SUMMARY
--   SET RESULT_ID = :NEW.RESULT_ID,
--       LAST_UPDATED = SYSDATE
--   WHERE USER_ID = (
--     SELECT USER_ID FROM TB_SIMULATION_SETTING WHERE SETTING_ID = :NEW.SETTING_ID
--   );
-- END;
-- /


-- 샘플 데이터

-- TB_USERS
INSERT INTO TB_USERS (USER_ID, PHONE, USER_PWD, USERNAME, PROFILE_IMAGE, CREATED_AT, UPDATED_AT, STATUS, ADMIN_YN)
VALUES ('user001', '010-1234-5678', '$2a$10$N.zmdr9k7uOCQb376NoUnuTJ8iAt6Z5EHsM8lE9lBOsl7iKTVEFDa', '홍길동', null, SYSDATE, NULL, 1, 'Y');

INSERT INTO TB_USERS (USER_ID, PHONE, USER_PWD, USERNAME, PROFILE_IMAGE, CREATED_AT, UPDATED_AT, STATUS, ADMIN_YN)
VALUES ('user002', '010-1235-5679', '$2a$10$N.zmdr9k7uOCQb376NoUnuTJ8iAt6Z5EHsM8lE9lBOsl7iKTVEFDa', '홍길순', null, SYSDATE, NULL, 1, 'N');

-- NOTICES
INSERT INTO TB_NOTICES (NOTICE_NO, TITLE, USER_ID, CONTENT, READCOUNT, ORIGINAL_FILEPATH, RENAME_FILEPATH, IMPORTANCE, IMP_END_DATE, NOTICE_DATE)
VALUES (1, '시스템 점검 안내', 'user001', '2025년 7월 5일 00:00 ~ 04:00 시스템 점검이 예정되어 있습니다. 이용에 참고 바랍니다.', 15, NULL, '20250705_maintenance.pdf', 'Y', TO_DATE('2025-07-05', 'YYYY-MM-DD'), SYSDATE);

INSERT INTO TB_NOTICES (NOTICE_NO, TITLE, USER_ID, CONTENT, READCOUNT, ORIGINAL_FILEPATH, RENAME_FILEPATH, IMPORTANCE, IMP_END_DATE, NOTICE_DATE)
VALUES (2, '신규 기능 업데이트 안내', 'user001', '금일자로 심리 분석 결과에 대한 시각화 기능이 새롭게 적용되었습니다.', 8, NULL, NULL, 'N', SYSDATE, SYSDATE);

-- TB_USER_REWARDS
INSERT INTO TB_USER_REWARDS (USER_REWARD_ID, USER_ID, REWARD_ID, ACQUIRED_AT, IS_APPLIED)
VALUES (1, 'user001', 1, TO_DATE('2024-06-01 10:00:00', 'YYYY-MM-DD HH24:MI:SS'), 1);

INSERT INTO TB_USER_REWARDS (USER_REWARD_ID, USER_ID, REWARD_ID, ACQUIRED_AT, IS_APPLIED)
VALUES (2, 'user001', 2, TO_DATE('2024-06-02 11:00:00', 'YYYY-MM-DD HH24:MI:SS'), 0);

INSERT INTO TB_USER_REWARDS (USER_REWARD_ID, USER_ID, REWARD_ID, ACQUIRED_AT, IS_APPLIED)
VALUES (3, 'user002', 1, TO_DATE('2024-06-03 09:30:00', 'YYYY-MM-DD HH24:MI:SS'), 0);

INSERT INTO TB_USER_REWARDS (USER_REWARD_ID, USER_ID, REWARD_ID, ACQUIRED_AT, IS_APPLIED)
VALUES (4, 'user002', 3, TO_DATE('2024-06-04 14:20:00', 'YYYY-MM-DD HH24:MI:SS'), 1);

-- BCrypt 해싱된 비밀번호로 업데이트 (123456 -> BCrypt 해싱)
UPDATE TB_USERS SET USER_PWD = '$2a$10$N.zmdr9k7uOCQb376NoUnuTJ8iAt6Z5EHsM8lE9lBOsl7iKTVEFDa' WHERE USER_ID = 'user002';

UPDATE TB_USERS SET USER_PWD = '123456' WHERE USER_ID = 'user001';
UPDATE TB_USERS SET USER_PWD = '654321' WHERE USER_ID = 'user002';

COMMIT;
